"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1465],{9679:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=n(5893),o=n(1151);n(4866),n(5162);const r={title:"Custom Scopes"},c=void 0,a={id:"guides/custom-scopes",title:"Custom Scopes",description:"Out of the box, Clawject provides 3 scopes: singleton, transient and fresh, but sometimes you may need to define your own scopes.",source:"@site/docs/guides/custom-scopes.mdx",sourceDirName:"guides",slug:"/guides/custom-scopes",permalink:"/docs/guides/custom-scopes",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1708632846,formattedLastUpdatedAt:"Feb 22, 2024",frontMatter:{title:"Custom Scopes"},sidebar:"docs",previous:{title:"Sharing configurations",permalink:"/docs/guides/sharing-configurations"},next:{title:"Errors",permalink:"/docs/errors"}},i={},l=[{value:"Creating a CustomScope Class",id:"creating-a-customscope-class",level:2},{value:"Creating the server code",id:"creating-the-server-code",level:3},{value:"Managing the Scoped Objects and Callbacks",id:"managing-the-scoped-objects-and-callbacks",level:3},{value:"Retrieving an Object from Scope",id:"retrieving-an-object-from-scope",level:3},{value:"Registering a Destruction Callback",id:"registering-a-destruction-callback",level:3},{value:"Removing an Object from the Scope",id:"removing-an-object-from-the-scope",level:3},{value:"Destroying the Scope",id:"destroying-the-scope",level:3},{value:"Registering the Scope",id:"registering-the-scope",level:3},{value:"Using the Custom Scope",id:"using-the-custom-scope",level:3},{value:"How it works?",id:"how-it-works",level:4},{value:"Now let&#39;s put everything together",id:"now-lets-put-everything-together",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Out of the box, Clawject provides 3 scopes: ",(0,s.jsx)(t.code,{children:"singleton"}),", ",(0,s.jsx)(t.code,{children:"transient"})," and ",(0,s.jsx)(t.code,{children:"fresh"}),", but sometimes you may need to define your own scopes."]}),"\n",(0,s.jsx)(t.p,{children:"For example, if you are developing an http server application,\nyou may want to provide a separate instance of a particular bean or set of beans for each request.\nClawject provides a mechanism for creating custom scopes for scenarios such as this."}),"\n",(0,s.jsx)(t.h2,{id:"creating-a-customscope-class",children:"Creating a CustomScope Class"}),"\n",(0,s.jsxs)(t.p,{children:["To create a custom scope, you should implement the ",(0,s.jsx)(t.code,{children:"CustomScope"})," interface."]}),"\n",(0,s.jsxs)(t.p,{children:["In the following steps, we will implement ",(0,s.jsx)(t.code,{children:"http-request"})," scope that\nis using ",(0,s.jsx)(t.a,{href:"https://nodejs.org/overview/async_context.html#class-asynclocalstorage",children:"AsyncLocalStorage"}),"\nto assign and retrieve ",(0,s.jsx)(t.code,{children:"httpRequestId"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"creating-the-server-code",children:"Creating the server code"}),"\n",(0,s.jsxs)(t.p,{children:["First of all - let's define ",(0,s.jsx)(t.code,{children:"HttpExecutionContext"})," class that will assign unique id to each http request,\nallows us to retrieve ",(0,s.jsx)(t.code,{children:"currentRequestId"}),", and notify subscriber when http request is finished:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import http from 'node:http';\nimport { AsyncLocalStorage } from 'node:async_hooks';\n\nexport class HttpExecutionContext {\n  private static idSeq = 0;\n  private static asyncLocalStorage = new AsyncLocalStorage<number>();\n  private static declare requestEndSubscriber: (requestId: number) => void;\n\n  static run(fn: () => void) {\n    this.asyncLocalStorage.run(this.idSeq++, fn);\n  }\n\n  static getCurrentRequestId(): number {\n    //For simplicity - let's assume that AsyncLocalStorage always returns a value\n    return this.asyncLocalStorage.getStore();\n  }\n\n  static onRequestEnd(): void {\n    this.requestEndSubscriber(this.getCurrentRequestId());\n  }\n\n  static subscribeOnRequestEnd(subscriber: (requestId: number) => void): void {\n    this.requestEndSubscriber = subscriber;\n  }\n}\n\nhttp.createServer((req, res) => {\n  HttpExecutionContext.run(() => {\n    setTimeout(() => {\n      res.end();\n      HttpExecutionContext.onRequestEnd();\n    }, 100);\n  });\n}).listen(8080);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"managing-the-scoped-objects-and-callbacks",children:"Managing the Scoped Objects and Callbacks"}),"\n",(0,s.jsxs)(t.p,{children:["One of the first things to consider when implementing a ",(0,s.jsx)(t.code,{children:"CustomScope"})," class is how you will store\nand manage the scoped objects and destruction callbacks.\nThis could be done using a Map or a dedicated class, for example."]}),"\n",(0,s.jsx)(t.p,{children:"Now let's define our custom scope class:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"class RequestScope implements CustomScope {\n  // requestId to Map of objectName to object\n  private scopedObjects = new Map<number, Map<string, any>>();\n  // requestId to Map of objectName to object destruction callback\n  private destructionCallbacks = new Map<number, Map<string, () => void>>();\n\n  /* ... */\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"retrieving-an-object-from-scope",children:"Retrieving an Object from Scope"}),"\n",(0,s.jsxs)(t.p,{children:["To retrieve an object by name from our scope, let's implement the ",(0,s.jsx)(t.code,{children:"get"})," method.\nNote that if the named object does not exist in the scope, this method must create and return a new object."]}),"\n",(0,s.jsxs)(t.p,{children:["In our implementation, we check to see if the named object is in our map under current requestId.\nIf it is, we return it, and if not, we use the ",(0,s.jsx)(t.code,{children:"ObjectFactory"})," to create a new object, add it to our map, and return it:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"class RequestScope implements CustomScope {\n  /* ... */\n\n  get(name: string, objectFactory: ObjectFactory): ObjectFactoryResult {\n    const currentRequestId = HttpExecutionContext.getCurrentRequestId();\n\n    const scopedObjects = this.scopedObjects.get(currentRequestId) ?? new Map<string, any>();\n    this.scopedObjects.set(currentRequestId, scopedObjects);\n\n    const scopedObject = scopedObjects.get(name) ?? objectFactory.getObject();\n    scopedObjects.set(name, scopedObject);\n\n    return scopedObject;\n  }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"registering-a-destruction-callback",children:"Registering a Destruction Callback"}),"\n",(0,s.jsx)(t.p,{children:"We must also implement the registerDestructionCallback method.\nThis method provides a callback that is to be executed when the named object is destroyed or if the scope\nitself is destroyed by the application:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"class RequestScope implements CustomScope {\n  /* ... */\n\n  registerDestructionCallback(name: string, callback: () => void): void {\n    const currentRequestId = HttpExecutionContext.getCurrentRequestId();\n    const scopedDestructionCallbacks = this.destructionCallbacks.get(currentRequestId) ?? new Map<string, () => void>();\n    this.destructionCallbacks.set(currentRequestId, scopedDestructionCallbacks);\n\n    scopedDestructionCallbacks.set(name, callback);\n  }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"removing-an-object-from-the-scope",children:"Removing an Object from the Scope"}),"\n",(0,s.jsx)(t.p,{children:"Next, let's implement the remove method,\nwhich removes the named object from the scope and also removes its registered\ndestruction callback, returning the removed object."}),"\n",(0,s.jsxs)(t.p,{children:["Note that it is the ",(0,s.jsx)(t.strong,{children:"caller's (clawject) responsibility"})," to actually execute the callback and destroy the removed object."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"class RequestScope implements CustomScope {\n  /* ... */\n\n  remove(name: string): ObjectFactoryResult | null {\n    const currentRequestId = HttpExecutionContext.getCurrentRequestId();\n\n    const scopedObject = this.scopedObjects.get(currentRequestId)?.get(name) ?? null;\n\n    this.scopedObjects.get(currentRequestId)?.delete(name);\n    this.destructionCallbacks.get(currentRequestId)?.delete(name);\n\n    return scopedObject;\n  }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"destroying-the-scope",children:"Destroying the Scope"}),"\n",(0,s.jsxs)(t.p,{children:["Finally, let's implement the ",(0,s.jsx)(t.code,{children:"destroy"})," method, that will be called when ",(0,s.jsx)(t.code,{children:"http-request"})," will be finished\nand which destroys the scope and all of its objects:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"class RequestScope implements CustomScope {\n  constructor() {\n    HttpExecutionContext.subscribeOnRequestEnd(this.destroy)\n  }\n\n  private destroy = (requestId: number): void => {\n    this.scopedObjects.delete(requestId);\n    this.destructionCallbacks.get(requestId)?.forEach(callback => callback());\n  }\n\n  /* ... */\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"registering-the-scope",children:"Registering the Scope"}),"\n",(0,s.jsxs)(t.p,{children:["To make the Clawject container aware of your new scope,\nyou need to register it through the ",(0,s.jsx)(t.code,{children:"registerScope"})," method on a ",(0,s.jsx)(t.code,{children:"ContainerManager"})," instance."]}),"\n",(0,s.jsx)(t.p,{children:"Let's take a look at this method's definition:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"registerScope(scopeName: string, scope: CustomScope): void\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The first parameter, scopeName, is used to identify/specify a scope by its unique name.\nThe second parameter, scope, is an actual instance of the ",(0,s.jsx)(t.code,{children:"CustomScope"})," implementation that you wish to register and use."]}),"\n",(0,s.jsxs)(t.p,{children:["Let's register our ",(0,s.jsx)(t.code,{children:"RequestScope"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"ScopeRegister.registerScope('http-request', new RequestScope());\n"})}),"\n",(0,s.jsx)(t.h3,{id:"using-the-custom-scope",children:"Using the Custom Scope"}),"\n",(0,s.jsxs)(t.p,{children:["Now that we have registered our custom scope,\nwe can apply it to any of our beans just as we would with any other\nbean that uses a scope other than singleton (the default scope) \u2014 by using the\n",(0,s.jsx)(t.code,{children:"@Scope"})," decorator and specifying our custom scope by name."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ScopedBean"})," class will assign a random value to its ",(0,s.jsx)(t.code,{children:"scopedProperty"})," property\nthat will be different for each request but identical in bounds of one request."]}),"\n",(0,s.jsx)(t.h4,{id:"how-it-works",children:"How it works?"}),"\n",(0,s.jsxs)(t.p,{children:["When ",(0,s.jsx)(t.code,{children:"ScopedBean"})," will be requested from the container -\nproxy will be injected instead of the actual bean instance,\nthis proxy will ask ",(0,s.jsx)(t.code,{children:"RequestScope"})," to get the bean instance, ",(0,s.jsx)(t.code,{children:"RequestScope"}),"\nwill return or create bean that is associated with current request id.\nBecause proxies are injected - no needs to rebuild the whole dependency tree,\nand other beans that is using ",(0,s.jsx)(t.code,{children:"ScopedBean"})," will have own scope."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"export class ScopedBean {\n  scopedProperty: number\n\n  constructor() {\n    this.scopedProperty = Math.random();\n  }\n}\n\nexport class NonScopedBean {\n  constructor(private scopedBean: ScopedBean) {}\n\n  invoke(): void {\n    console.log(`scopedProperty of ScopedBean: ${this.scopedBean.scopedProperty}`);\n  }\n}\n\nexport class ApplicationContext extends CatContext {\n  @Scope('http-request') scopedBean = Bean(ScopedBean);\n\n  nonScopedBean = Bean(NonScopedBean);\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"now-lets-put-everything-together",children:"Now let's put everything together"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="index.ts"',children:"import http from 'node:http';\nimport { ContainerManager } from '@clawject/di';\nimport { HttpExecutionContext } from './HttpExecutionContext';\nimport { ApplicationContext } from './ApplicationContext';\n\nconst {\n  nonScopedBean,\n} = ContainerManager.init(ApplicationContext).getBeans();\n\nhttp.createServer((req, res) => {\n  HttpExecutionContext.run(() => {\n    setTimeout(() => {\n      nonScopedBean.invoke();\n      res.end();\n      HttpExecutionContext.onRequestEnd();\n    }, 100);\n  });\n}).listen(8080);\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="HttpExecutionContext.ts"',children:"import { AsyncLocalStorage } from 'node:async_hooks';\n\nexport class HttpExecutionContext {\n  private static idSeq = 0;\n  private static asyncLocalStorage = new AsyncLocalStorage<number>();\n  private static declare requestEndSubscriber: (requestId: number) => void;\n\n  static run(fn: () => void) {\n    this.asyncLocalStorage.run(this.idSeq++, fn);\n  }\n\n  static getCurrentRequestId(): number {\n    //For simplicity - let's assume that AsyncLocalStorage always returns a value\n    return this.asyncLocalStorage.getStore();\n  }\n\n  static onRequestEnd(): void {\n    this.requestEndSubscriber(this.getCurrentRequestId());\n  }\n\n  static subscribeOnRequestEnd(subscriber: (requestId: number) => void): void {\n    this.requestEndSubscriber = subscriber;\n  }\n}\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="RequestScope.ts"',children:"import { CustomScope, ObjectFactory, ObjectFactoryResult } from '@clawject/di';\nimport { HttpExecutionContext } from './HttpExecutionContext';\n\nexport class RequestScope implements CustomScope {\n  constructor() {\n    HttpExecutionContext.subscribeOnRequestEnd(this.destroy)\n  }\n\n  // requestId to Map of objectName to object\n  private scopedObjects = new Map<number, Map<string, any>>();\n  // requestId to Map of objectName to object destruction callback\n  private destructionCallbacks = new Map<number, Map<string, () => void>>();\n\n  get(name: string, objectFactory: ObjectFactory): ObjectFactoryResult {\n    const currentRequestId = HttpExecutionContext.getCurrentRequestId();\n\n    const scopedObjects = this.scopedObjects.get(currentRequestId) ?? new Map<string, any>();\n    this.scopedObjects.set(currentRequestId, scopedObjects);\n\n    const scopedObject = scopedObjects.get(name) ?? objectFactory.getObject();\n    scopedObjects.set(name, scopedObject);\n\n    return scopedObject;\n  }\n\n  registerDestructionCallback(name: string, callback: () => void): void {\n    const currentRequestId = HttpExecutionContext.getCurrentRequestId();\n    const scopedDestructionCallbacks = this.destructionCallbacks.get(currentRequestId) ?? new Map<string, () => void>();\n    this.destructionCallbacks.set(currentRequestId, scopedDestructionCallbacks);\n\n    scopedDestructionCallbacks.set(name, callback);\n  }\n\n  remove(name: string): ObjectFactoryResult | null {\n    const currentRequestId = HttpExecutionContext.getCurrentRequestId();\n\n    const scopedObject = this.scopedObjects.get(currentRequestId)?.get(name) ?? null;\n\n    this.scopedObjects.get(currentRequestId)?.delete(name);\n    this.destructionCallbacks.get(currentRequestId)?.delete(name);\n\n    return scopedObject;\n  }\n\n  private destroy = (requestId: number): void => {\n    this.scopedObjects.delete(requestId);\n    this.destructionCallbacks.get(requestId)?.forEach(callback => callback());\n  }\n}\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="ScopedBean.ts"',children:"export class ScopedBean {\n  scopedProperty: number\n\n  constructor() {\n    this.scopedProperty = Math.random();\n  }\n}\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="NonScopedBean.ts"',children:"import { ScopedBean } from './ScopedBean';\n\nexport class NonScopedBean {\n  constructor(private scopedBean: ScopedBean) {}\n\n  invoke(): void {\n    console.log(`scopedProperty of ScopedBean: ${this.scopedBean.scopedProperty}`);\n  }\n}\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:'title="ApplicationContext.ts"',children:"import { Bean, CatContext, Scope } from '@clawject/di';\nimport { ScopedBean } from './ScopedBean';\nimport { NonScopedBean } from './NonScopedBean';\n\ninterface ExternalBeans {\n  nonScopedBean: NonScopedBean\n}\n\nexport class ApplicationContext extends CatContext<ExternalBeans> {\n  @Scope('http-request') scopedBean = Bean(ScopedBean);\n\n  nonScopedBean = Bean(NonScopedBean);\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>c});n(7294);var s=n(6905);const o={tabItem:"tabItem_Ymn6"};var r=n(5893);function c(e){let{children:t,hidden:n,className:c}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.Z)(o.tabItem,c),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>S});var s=n(7294),o=n(6905),r=n(2466),c=n(6550),a=n(469),i=n(1980),l=n(7392),d=n(12);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:o}}=e;return{value:t,label:n,attributes:s,default:o}}))}(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const o=(0,c.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=p(e),[c,i]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:r}))),[l,u]=m({queryString:n,groupId:o}),[b,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,d.Nk)(n);return[o,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),j=(()=>{const e=l??b;return h({value:e,tabValues:r})?e:null})();(0,a.Z)((()=>{j&&i(j)}),[j]);return{selectedValue:c,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var g=n(2389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(5893);function f(e){let{className:t,block:n,selectedValue:s,selectValue:c,tabValues:a}=e;const i=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.o5)(),d=e=>{const t=e.currentTarget,n=i.indexOf(t),o=a[n].value;o!==s&&(l(t),c(o))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t),children:a.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>i.push(e),onKeyDown:u,onClick:d,...r,className:(0,o.Z)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:o}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===o));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function y(e){const t=b(e);return(0,x.jsxs)("div",{className:(0,o.Z)("tabs-container",j.tabList),children:[(0,x.jsx)(f,{...e,...t}),(0,x.jsx)(v,{...e,...t})]})}function S(e){const t=(0,g.Z)();return(0,x.jsx)(y,{...e,children:u(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>c});var s=n(7294);const o={},r=s.createContext(o);function c(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);