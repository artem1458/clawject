"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6],{6644:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var o=t(5893),i=t(1151);const a={title:"Intro to IoC and DI",id:"ioc-di"},s="Intro to Inversion of Control and Dependency Injection with Clawject",r={id:"base-concepts/ioc-di",title:"Intro to IoC and DI",description:"In this section, we will explore the principles of Inversion of Control (IoC) and Dependency Injection (DI),",source:"@site/docs/04-base-concepts/01-ioc_di.mdx",sourceDirName:"04-base-concepts",slug:"/base-concepts/ioc-di",permalink:"/docs/base-concepts/ioc-di",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Intro to IoC and DI",id:"ioc-di"},sidebar:"tutorialSidebar",previous:{title:"Language Service \u2728",permalink:"/docs/language-service"},next:{title:"Clawject type system",permalink:"/docs/base-concepts/clawject-type-system"}},c={},l=[{value:"What is Inversion of Control?",id:"what-is-inversion-of-control",level:2},{value:"What is Dependency Injection?",id:"what-is-dependency-injection",level:2},{value:"The Clawject IoC container",id:"the-clawject-ioc-container",level:2},{value:"Constructor-Based Dependency Injection",id:"constructor-based-dependency-injection",level:2},{value:"Lazy Initialized Beans",id:"lazy-initialized-beans",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"intro-to-inversion-of-control-and-dependency-injection-with-clawject",children:"Intro to Inversion of Control and Dependency Injection with Clawject"}),"\n",(0,o.jsx)(n.p,{children:"In this section, we will explore the principles of Inversion of Control (IoC) and Dependency Injection (DI),\nand take a look at how these are implemented in Clawject."}),"\n",(0,o.jsx)(n.h2,{id:"what-is-inversion-of-control",children:"What is Inversion of Control?"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"Inversion of Control"})})," is a principle in software engineering which transfers the control\nof objects or portions of a program to a container or framework.\nWe most often use it in the context of object-oriented programming."]}),"\n",(0,o.jsx)(n.p,{children:"In contrast with traditional programming, in which our custom code makes calls to a library,\nthe IoC enables a framework to take control of the flow of a program and make calls to our custom code.\nTo enable this, frameworks use abstractions with additional behavior built in."}),"\n",(0,o.jsx)(n.p,{children:"The advantages of this architecture are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Decoupling the execution of a task from its implementation"}),"\n",(0,o.jsx)(n.li,{children:"Making it easier to switch between different implementations"}),"\n",(0,o.jsx)(n.li,{children:"Greater modularity of a program"}),"\n",(0,o.jsx)(n.li,{children:"Greater ease in testing a program by isolating a component or mocking its dependencies\nand allowing components to communicate through contracts"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"One of the ways we can achieve Inversion of Control is a Dependency Injection (DI)."}),"\n",(0,o.jsx)(n.h2,{id:"what-is-dependency-injection",children:"What is Dependency Injection?"}),"\n",(0,o.jsx)(n.p,{children:"Dependency injection is a pattern we can use to implement IoC,\nwhere the control being inverted is setting an object's dependencies."}),"\n",(0,o.jsxs)(n.p,{children:["Connecting objects with other objects, or \u201c",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"injecting"})}),"\u201d objects into other objects, is done by an assembler rather than by the objects themselves."]}),"\n",(0,o.jsx)(n.p,{children:"Here's how we would create an object dependency in traditional programming:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"class Store {\n  private item: Item;\n\n  constructor() {\n    this.item = new ItemImpl();\n  }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"By using DI, we can rewrite the example without specifying the implementation of the Item that we want:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"class Store {\n  constructor(\n    private item: Item\n  ) {}\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"the-clawject-ioc-container",children:"The Clawject IoC container"}),"\n",(0,o.jsx)(n.p,{children:"An IoC container is a common characteristic of frameworks that implement IoC."}),"\n",(0,o.jsx)(n.p,{children:"In the Clawject, the interface CatContext represents the IoC container.\nThe Clawject container is responsible for instantiating, configuring and assembling objects known as beans,\nas well as managing their life cycles."}),"\n",(0,o.jsx)(n.p,{children:"Right now Clawject provides one way to manage IoC containers. This is ContainerManager interface."}),"\n",(0,o.jsx)(n.p,{children:"Here is the way to instantiate container:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"class ApplicationContext extends CatContext {}\n\nContainerManager.init(ApplicationContext);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"constructor-based-dependency-injection",children:"Constructor-Based Dependency Injection"}),"\n",(0,o.jsx)(n.p,{children:"In the case of constructor-based dependency injection,\nthe container will invoke a constructor with arguments each representing a dependency we want to set."}),"\n",(0,o.jsx)(n.p,{children:"Clawject resolves each argument primarily by type, followed by the name of the constructor parameter.\nLet's see the configuration of a bean and its dependencies using Bean call:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"class Bar {}\nclass Foo {\n  constructor(private bar: Bar) {}\n}\n\nclass ApplicationContext extends CatContext {\n  foo = Bean(Foo)\n  bar = Bean(Bar)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"We're assigning a Bean call result to a class property to define a bean.\nBean name is a property name."}),"\n",(0,o.jsx)(n.p,{children:"For a bean with the default singleton scope, Clawject first checks if a cached instance of the bean already exists,\nand only creates a new one if it doesn't.\nIf we're using the prototype scope, the container returns a new bean instance for each bean instance request."}),"\n",(0,o.jsx)(n.p,{children:"Let's see how we can define a bean with the prototype scope:"}),"\n",(0,o.jsxs)(n.p,{children:["In this example, we have two beans that require the ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"Baz"})})," instance,\nfor each of which the container creates a new instance of ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"Baz"})})," class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"class Baz {}\nclass Bar {\n  constructor(private baz: Baz) {}\n}\nclass Foo {\n  constructor(private baz: Baz) {}\n}\n\nclass ApplicationContext extends CatContext {\n  foo = Bean(Foo)\n  bar = Bean(Bar)\n\n  @Scope('prototype')\n  baz = Bean(Baz)\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"lazy-initialized-beans",children:"Lazy Initialized Beans"}),"\n",(0,o.jsxs)(n.p,{children:["By default, the container creates and configures all singleton beans during initialization.\nTo avoid this, we can use the ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"lazy"})})," decorator with on the bean configuration level:"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"foo"})," bean will only be initialized when it's first requested, and not at startup."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"class ApplicationContext extends CatContext {\n  @Lazy\n  foo = Bean(Foo)\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can redefine the default lazy value for all beans in clawject configuration file TODO ADD LINK"})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var o=t(7294);const i={},a=o.createContext(i);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);