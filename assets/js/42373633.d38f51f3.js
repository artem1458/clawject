"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[457],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,g=u["".concat(l,".").concat(d)]||u[d]||f[d]||r;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7561:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={title:"CatContext",id:"cat-context"},i=void 0,c={unversionedId:"base-concepts/cat-context",id:"base-concepts/cat-context",title:"CatContext",description:"CatContext is a class that represents the IoC container.",source:"@site/docs/04-base-concepts/05-cat-context.mdx",sourceDirName:"04-base-concepts",slug:"/base-concepts/cat-context",permalink:"/docs/base-concepts/cat-context",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"CatContext",id:"cat-context"},sidebar:"tutorialSidebar",previous:{title:"InitializedContext",permalink:"/docs/base-concepts/initialized-context"},next:{title:"Bean",permalink:"/docs/base-concepts/bean/"}},l={},s=[{value:"Usage",id:"usage",level:2},{value:"Defining external Beans",id:"defining-external-beans",level:2},{value:"Config",id:"config",level:2}],p={toc:s},u="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"CatContext is a class that represents the IoC container.\nThe container is responsible for instantiating, configuring and assembling objects known as Beans and managing their life cycles."),(0,o.kt)("p",null,"CatContext it's an abstract class that can be extended to create a custom container."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"To define container, you need to create a class that extends CatContext."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { CatContext } from 'clawject';\n\nexport class MyContext extends CatContext {}\n")),(0,o.kt)("p",null,"To init container, you need to use ContainerManager interface and pass class to the init method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { ContainerManager } from 'clawject';\n\nContainerManager.init(MyContext);\n")),(0,o.kt)("h2",{id:"defining-external-beans"},"Defining external Beans"),(0,o.kt)("p",null,"If you need to receive some Beans outside of context -\nyou can do it by specifying the first generic argument in ",(0,o.kt)("inlineCode",{parentName:"p"},"CatContext"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Bean, CatContext, ContainerManager } from 'clawject';\n\ninterface MyExternalBeans {\n  foo: string;\n}\n\nclass MyContext extends CatContext<MyExternalBeans> {\n  @Bean foo = 'fooValue'\n}\n\nconst foo = ContainerManager.init(MyContext).getBeans().foo;\n\nconsole.log(foo); // <-- Will print \"fooValue\"\n")),(0,o.kt)("p",null,"CatContext will validate is all external beans with applicable types are provided,\nand if not - compile-time error will be reported."),(0,o.kt)("p",null,"ExternalBeans type should always be object-like and with statically known members."),(0,o.kt)("h2",{id:"config"},"Config"),(0,o.kt)("p",null,"If you need to pass some additional information externally -\nyou can do it by specifying the second generic argument in ",(0,o.kt)("inlineCode",{parentName:"p"},"CatContext"),"."),(0,o.kt)("p",null,"Config is available via protected getter ",(0,o.kt)("inlineCode",{parentName:"p"},"config"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { CatContext, ContainerManager, PostConstruct } from 'clawject';\n\ninterface MyConfig {\n  foo: string;\n}\n\nclass MyContext extends CatContext<{}, MyConfig> {\n  @PostConstruct\n  postConstruct() {\n    console.log(this.config.foo); // <-- Will print \"fooValue\"\n  }\n}\n\nContainerManager.init(MyContext, {config: {foo: 'fooValue'}});\n")))}f.isMDXComponent=!0}}]);