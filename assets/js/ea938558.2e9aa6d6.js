"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3286],{8768:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>p});var a=o(5893),s=o(1151);const t={title:"ExposeBeans",hide_title:!0},c=void 0,i={id:"fundamentals/expose-beans",title:"ExposeBeans",description:"ExposeBeans",source:"@site/docs/fundamentals/expose-beans.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/expose-beans",permalink:"/docs/fundamentals/expose-beans",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1710276155,formattedLastUpdatedAt:"Mar 12, 2024",frontMatter:{title:"ExposeBeans",hide_title:!0},sidebar:"docs",previous:{title:"Bean",permalink:"/docs/fundamentals/bean"},next:{title:"@Internal @External",permalink:"/docs/fundamentals/internal-external"}},l={},p=[{value:"ExposeBeans",id:"exposebeans",level:2},{value:"Usage",id:"usage",level:3}];function r(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"exposebeans",children:"ExposeBeans"}),"\n",(0,a.jsxs)(n.p,{children:["ExposeBeans function allows you to expose beans from the application context, so that they can be accessed from the outside of the ",(0,a.jsx)(n.code,{children:"@ClawjectApplication"})," class."]}),"\n",(0,a.jsxs)(n.p,{children:["This function will have an effect only on the root of your application context class (the one annotated with ",(0,a.jsx)(n.code,{children:"@ClawjectApplication"}),").\nClawject will validate the beans that are being exposed and will report an error if the bean is not found in the application context."]}),"\n",(0,a.jsxs)(n.p,{children:["Exposed beans are resolved same as ",(0,a.jsx)(n.a,{href:"/docs/fundamentals/bean#how-dependencies-are-resolved",children:"bean dependencies are resolved"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsxs)(n.p,{children:["Let's say you have a ",(0,a.jsx)(n.code,{children:"@ClawjectApplication"})," class and you want to expose a bean from it.\nTo do so, you can use ",(0,a.jsx)(n.code,{children:"ExposeBeans"})," function and object type to expose the beans."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { Bean, ClawjectApplication, ClawjectFactory, ExposeBeans } from '@clawject/di';\n\nclass Foo {}\nclass Bar {}\n\ninterface BeansToExpose {\n  fooBean: Foo;\n  barBean: Bar;\n}\n\n@ClawjectApplication\nclass Application {\n  foo = Bean(Foo);\n  bar = Bean(Bar);\n\n  exposed = ExposeBeans<BeansToExpose>()\n}\n\nconst applicationContext = await ClawjectFactory.createApplicationContext(Application);\n\n// We received the exposed beans as an object with the same keys as the `BeansToExpose` interface\nconst exposedBeans = await applicationContext.getExposedBeans();\nconsole.log(exposedBeans.fooBean); // Foo {}\nconsole.log(exposedBeans.barBean); // Bar {}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If we want to get only one of the exposed beans, we can use ",(0,a.jsx)(n.code,{children:"getExposedBean"})," method."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const fooBean = await applicationContext.getExposedBean('fooBean');\nconsole.log(fooBean); // Foo {}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can also define more than one ",(0,a.jsx)(n.code,{children:"ExposeBeans"})," fields in the ",(0,a.jsx)(n.code,{children:"@ClawjectApplication"})," class, all them will be merged into one object."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { Bean, ClawjectApplication, ClawjectFactory, ExposeBeans } from '@clawject/di';\n\nclass Foo {}\nclass Bar {}\n\ninterface ExposedFoo {\n  fooBean: Foo;\n}\ninterface ExposedBar {\n  barBean: Bar;\n}\n\n@ClawjectApplication\nclass Application {\n  foo = Bean(Foo);\n  bar = Bean(Bar);\n\n  exposedFoo = ExposeBeans<ExposedFoo>();\n  exposedBar = ExposeBeans<ExposedBar>();\n}\n\nconst applicationContext = await ClawjectFactory.createApplicationContext(Application);\n\n// We received the exposed beans as an object with the same keys as the `BeansToExpose` interface\nconst exposedBeans = await applicationContext.getExposedBeans();\nconsole.log(exposedBeans.fooBean); // Foo {}\nconsole.log(exposedBeans.barBean); // Bar {}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["However, if you define the same key in more than one ",(0,a.jsx)(n.code,{children:"ExposeBeans"})," field, an error will be reported."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"import { Bean, ClawjectApplication, ExposeBeans } from '@clawject/di';\n\nclass Foo {}\nclass Bar {}\n\ninterface ExposedFoo {\n  fooBean: Foo;\n}\ninterface ExposedBar {\n  fooBean: Foo;\n  barBean: Bar;\n}\n\n@ClawjectApplication\nclass Application {\n  foo = Bean(Foo);\n  bar = Bean(Bar);\n\n  exposedFoo = ExposeBeans<ExposedFoo>();\n  /**\n  * CE17: Could not expose beans. Duplicate declaration of exposed beans property detected.\n  * index.ts(7, 3): 'fooBean' is declared here.\n  * index.ts(10, 3): 'fooBean' is declared here.\n  * index.ts(15, 7): Application is declared here.\n  */\n  exposedBar = ExposeBeans<ExposedBar>();\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"But if you want to expose same bean with a different name, you can safely do it."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { Bean, ClawjectApplication, ClawjectFactory, ExposeBeans } from '@clawject/di';\n\nclass Foo {}\n\ninterface ExposedFooOne {\n  fooBeanOne: Foo;\n}\ninterface ExposedFooTwo {\n  fooBeanTwo: Foo;\n}\n\n@ClawjectApplication\nclass Application {\n  foo = Bean(Foo);\n\n  exposedFooOne = ExposeBeans<ExposedFooOne>();\n  exposedFooTwo = ExposeBeans<ExposedFooTwo>();\n}\n\nconst applicationContext = await ClawjectFactory.createApplicationContext(Application);\n\nconst exposedBeans = await applicationContext.getExposedBeans();\nconsole.log(exposedBeans.fooBeanOne === exposedBeans.fooBeanTwo); // true\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>c});var a=o(7294);const s={},t=a.createContext(s);function c(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);