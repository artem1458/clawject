"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction \ud83d\udc4b","href":"/docs/intro","docId":"intro"},{"type":"link","label":"Setup \ud83d\udee0\ufe0f","href":"/docs/setup","docId":"setup"},{"type":"link","label":"Language Service \u2728","href":"/docs/language-service","docId":"language-service"},{"type":"category","label":"Base concepts","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Intro to IoC and DI","href":"/docs/base-concepts/ioc-di","docId":"base-concepts/ioc-di"},{"type":"link","label":"Clawject type system","href":"/docs/base-concepts/clawject-type-system","docId":"base-concepts/clawject-type-system"},{"type":"link","label":"ContainerManager","href":"/docs/base-concepts/container-manager","docId":"base-concepts/container-manager"},{"type":"link","label":"InitializedContext","href":"/docs/base-concepts/initialized-context","docId":"base-concepts/initialized-context"},{"type":"link","label":"CatContext","href":"/docs/base-concepts/cat-context","docId":"base-concepts/cat-context"},{"type":"category","label":"Bean","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Declare Bean","href":"/docs/base-concepts/bean/declare-bean","docId":"base-concepts/bean/declare-bean"},{"type":"link","label":"Bean Types","href":"/docs/base-concepts/bean/bean-type","docId":"base-concepts/bean/bean-type"},{"type":"link","label":"Bean Dependencies","href":"/docs/base-concepts/bean/bean-dependencies","docId":"base-concepts/bean/bean-dependencies"}],"href":"/docs/base-concepts/bean/"},{"type":"link","label":"@Primary","href":"/docs/base-concepts/primary","docId":"base-concepts/primary"},{"type":"link","label":"@Qualifier","href":"/docs/base-concepts/qualifier","docId":"base-concepts/qualifier"},{"type":"link","label":"@Scope","href":"/docs/base-concepts/scope","docId":"base-concepts/scope"},{"type":"link","label":"@Lazy","href":"/docs/base-concepts/lazy","docId":"base-concepts/lazy"},{"type":"link","label":"@Embedded","href":"/docs/base-concepts/embedded","docId":"base-concepts/embedded"},{"type":"link","label":"@PostConstruct @PreDestroy","href":"/docs/base-concepts/postconstruct-predestroy","docId":"base-concepts/postconstruct-predestroy"}]},{"type":"category","label":"Advanced concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Inject Arrays and Collections","href":"/docs/advanced-concepts/injecting-collections","docId":"advanced-concepts/injecting-collections"},{"type":"link","label":"Custom Scopes","href":"/docs/advanced-concepts/custom-scopes","docId":"advanced-concepts/custom-scopes"}]}]},"docs":{"advanced-concepts/custom-scopes":{"id":"advanced-concepts/custom-scopes","title":"Custom Scopes","description":"Out of the box, Clawject provides two scopes: singleton and prototype, but sometimes you may need to define your own scopes.","sidebar":"tutorialSidebar"},"advanced-concepts/injecting-collections":{"id":"advanced-concepts/injecting-collections","title":"Inject Arrays and Collections","description":"Sometimes you need to inject an array or collection of beans into another bean,","sidebar":"tutorialSidebar"},"base-concepts/bean/bean":{"id":"base-concepts/bean/bean","title":"Bean","description":"What is Bean?","sidebar":"tutorialSidebar"},"base-concepts/bean/bean-dependencies":{"id":"base-concepts/bean/bean-dependencies","title":"Bean Dependencies","description":"Overview","sidebar":"tutorialSidebar"},"base-concepts/bean/bean-type":{"id":"base-concepts/bean/bean-type","title":"Bean Types","description":"Overview","sidebar":"tutorialSidebar"},"base-concepts/bean/declare-bean":{"id":"base-concepts/bean/declare-bean","title":"Declare Bean","description":"How to declare a Bean?","sidebar":"tutorialSidebar"},"base-concepts/cat-context":{"id":"base-concepts/cat-context","title":"CatContext","description":"Overview","sidebar":"tutorialSidebar"},"base-concepts/clawject-type-system":{"id":"base-concepts/clawject-type-system","title":"Clawject type system","description":"Clawject type system following a typescript type system as much as possible,","sidebar":"tutorialSidebar"},"base-concepts/container-manager":{"id":"base-concepts/container-manager","title":"ContainerManager","description":"Overview","sidebar":"tutorialSidebar"},"base-concepts/embedded":{"id":"base-concepts/embedded","title":"@Embedded","description":"Clawject provides @Embedded decorator that allows to register elements from a plain object as a beans.","sidebar":"tutorialSidebar"},"base-concepts/initialized-context":{"id":"base-concepts/initialized-context","title":"InitializedContext","description":"Overview","sidebar":"tutorialSidebar"},"base-concepts/ioc-di":{"id":"base-concepts/ioc-di","title":"Intro to IoC and DI","description":"Overview","sidebar":"tutorialSidebar"},"base-concepts/lazy":{"id":"base-concepts/lazy","title":"@Lazy","description":"By default, Clawject creates all singleton beans eagerly at the initialization of the context.","sidebar":"tutorialSidebar"},"base-concepts/postconstruct-predestroy":{"id":"base-concepts/postconstruct-predestroy","title":"@PostConstruct @PreDestroy","description":"Overview","sidebar":"tutorialSidebar"},"base-concepts/primary":{"id":"base-concepts/primary","title":"@Primary","description":"Overview","sidebar":"tutorialSidebar"},"base-concepts/qualifier":{"id":"base-concepts/qualifier","title":"@Qualifier","description":"Overview","sidebar":"tutorialSidebar"},"base-concepts/scope":{"id":"base-concepts/scope","title":"@Scope","description":"The Scope of Bean is a way to define when Bean will be created and how it is managed by container.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction \ud83d\udc4b","description":"What is Clawject and Why","sidebar":"tutorialSidebar"},"language-service":{"id":"language-service","title":"Language Service \u2728","description":"The Clawject Language Service provides code editors (VSCode, WebStorm, etc.) with a way to get errors","sidebar":"tutorialSidebar"},"setup":{"id":"setup","title":"Setup \ud83d\udee0\ufe0f","description":"Prerequisites","sidebar":"tutorialSidebar"}}}')}}]);