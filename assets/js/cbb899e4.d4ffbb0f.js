"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[196],{8282:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>j,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var i=c(5893),s=c(1151);const o={title:"Configuration \ud83d\udd2e"},t=void 0,r={id:"configuration",title:"Configuration \ud83d\udd2e",description:"Clawject using cosmiconfig to load configuration from different sources.",source:"@site/docs/configuration.mdx",sourceDirName:".",slug:"/configuration",permalink:"/docs/configuration",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1700930058,formattedLastUpdatedAt:"Nov 25, 2023",frontMatter:{title:"Configuration \ud83d\udd2e"},sidebar:"docs",previous:{title:"Language Service \u2728",permalink:"/docs/language-service"},next:{title:"IoC and DI",permalink:"/docs/core-concepts/ioc-di-basics"}},l={},a=[{value:"Configuration schema",id:"configuration-schema",level:2},{value:"<code>unsafeTSVersion</code>",id:"unsafetsversion",level:3},{value:"<code>features.keepContextNames</code>",id:"featureskeepcontextnames",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Clawject using ",(0,i.jsx)(n.a,{href:"https://github.com/cosmiconfig/cosmiconfig",children:"cosmiconfig"})," to load configuration from different sources.\nExample file names are:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".clawjectrc"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".clawjectrc.json"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".clawjectrc.yaml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".clawjectrc.yml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".clawjectrc.js"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".clawjectrc.ts"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".clawjectrc.cjs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".config/clawjectrc"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".config/clawjectrc.json"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".config/clawjectrc.yaml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".config/clawjectrc.yml"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".config/clawjectrc.js"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".config/clawjectrc.ts"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:".config/clawjectrc.cjs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"clawject.config.js"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"clawject.config.ts"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"clawject.config.cjs"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Also, you can declare a ",(0,i.jsx)(n.code,{children:"clawject"})," property in your ",(0,i.jsx)(n.code,{children:"package.json"})," file to configure Clawject."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["If you're using ",(0,i.jsx)(n.code,{children:"@clawject/language-service"})," - most likely you'll need to restart typescript language service after changing configuration."]})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-schema",children:"Configuration schema"}),"\n",(0,i.jsx)(n.p,{children:"Configuration schema is:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface Config {\n  unsafeTSVersion?: boolean; // Default: false\n  features?: {\n    keepContextNames?: boolean; // Default: true\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"unsafetsversion",children:(0,i.jsx)(n.code,{children:"unsafeTSVersion"})}),"\n",(0,i.jsx)(n.p,{children:"Allows using TypeScript version not officially supported by this version of Clawject."}),"\n",(0,i.jsxs)(n.p,{children:["By default, Clawject will check your TypeScript version to ensure it's compatible with the version used by Clawject.\nBut if you want to disable this check, you can set ",(0,i.jsx)(n.code,{children:"unsafeTSVersion"})," to ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Default value is ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"featureskeepcontextnames",children:(0,i.jsx)(n.code,{children:"features.keepContextNames"})}),"\n",(0,i.jsx)(n.p,{children:"Keeps context class names in generated code, it can be useful for debugging purposes."}),"\n",(0,i.jsxs)(n.p,{children:["Default value is ",(0,i.jsx)(n.code,{children:"true"}),"."]})]})}function j(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,c)=>{c.d(n,{Z:()=>r,a:()=>t});var i=c(7294);const s={},o=i.createContext(s);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);