"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[560],{7714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>x,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var a=t(5893),o=t(1151);const i={title:"CatContext"},s=void 0,r={id:"api/cat-context",title:"CatContext",description:"CatContext is a class that represents the IoC container.",source:"@site/docs/api/cat-context.mdx",sourceDirName:"api",slug:"/api/cat-context",permalink:"/docs/api/cat-context",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1701632127,formattedLastUpdatedAt:"Dec 3, 2023",frontMatter:{title:"CatContext"},sidebar:"docs",previous:{title:"ContainerManager",permalink:"/docs/api/container-manager"},next:{title:"InitializedContext",permalink:"/docs/api/initialized-context"}},c={},l=[{value:"Usage",id:"usage",level:2},{value:"Defining external Beans",id:"defining-external-beans",level:2},{value:"Config",id:"config",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"CatContext is a class that represents the IoC container.\nThe container is responsible for instantiating, configuring and assembling objects known as Beans and managing their life cycles."}),"\n",(0,a.jsx)(n.p,{children:"CatContext it's an abstract class that can be extended to create a custom container."}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.p,{children:"To define container, you need to create a class that extends CatContext."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { CatContext } from '@clawject/di';\n\nexport class MyContext extends CatContext {}\n"})}),"\n",(0,a.jsx)(n.p,{children:"To init container, you need to use ContainerManager interface and pass class to the init method."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { ContainerManager } from '@clawject/di';\n\nContainerManager.init(MyContext);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"defining-external-beans",children:"Defining external Beans"}),"\n",(0,a.jsxs)(n.p,{children:["If you need to receive some Beans outside of context -\nyou can do it by specifying the first generic argument in ",(0,a.jsx)(n.code,{children:"CatContext"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { Bean, CatContext, ContainerManager } from '@clawject/di';\n\ninterface MyExternalBeans {\n  foo: string;\n}\n\nclass MyContext extends CatContext<MyExternalBeans> {\n  @Bean foo = 'fooValue'\n}\n\nconst foo = ContainerManager.init(MyContext).getBeans().foo;\n\nconsole.log(foo); // <-- Will print \"fooValue\"\n"})}),"\n",(0,a.jsx)(n.p,{children:"CatContext will validate is all external beans with applicable types are provided,\nand if not - compile-time error will be reported."}),"\n",(0,a.jsx)(n.p,{children:"ExternalBeans type should always be object-like and with statically known members."}),"\n",(0,a.jsx)(n.h2,{id:"config",children:"Config"}),"\n",(0,a.jsxs)(n.p,{children:["If you need to pass some additional information externally -\nyou can do it by specifying the second generic argument in ",(0,a.jsx)(n.code,{children:"CatContext"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Config is available via protected getter ",(0,a.jsx)(n.code,{children:"config"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { CatContext, ContainerManager, PostConstruct } from '@clawject/di';\n\ninterface MyConfig {\n  foo: string;\n}\n\nclass MyContext extends CatContext<{}, MyConfig> {\n  @PostConstruct\n  postConstruct() {\n    console.log(this.config.foo); // <-- Will print \"fooValue\"\n  }\n}\n\nContainerManager.init(MyContext, {config: {foo: 'fooValue'}});\n"})})]})}function x(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var a=t(7294);const o={},i=a.createContext(o);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);