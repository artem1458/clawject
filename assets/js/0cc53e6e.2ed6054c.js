"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6327],{5838:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>l});var o=i(5893),r=i(1151);const t={title:"@Internal @External",hide_title:!0,tags:["@Internal","@External"]},a=void 0,c={id:"fundamentals/internal-external",title:"@Internal @External",description:"@Internal and @External",source:"@site/docs/fundamentals/internal-external.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/internal-external",permalink:"/docs/fundamentals/internal-external",draft:!1,unlisted:!1,tags:[{label:"@Internal",permalink:"/docs/tags/internal"},{label:"@External",permalink:"/docs/tags/external"}],version:"current",lastUpdatedAt:1710363754,formattedLastUpdatedAt:"Mar 13, 2024",frontMatter:{title:"@Internal @External",hide_title:!0,tags:["@Internal","@External"]},sidebar:"docs",previous:{title:"ExposeBeans",permalink:"/docs/fundamentals/expose-beans"},next:{title:"Lifecycle",permalink:"/docs/fundamentals/lifecycle"}},s={},l=[{value:"@Internal and @External",id:"internal-and-external",level:2},{value:"@Internal",id:"internal",level:3},{value:"When target is Bean",id:"when-target-is-bean",level:4},{value:"When target is Imported Configuration",id:"when-target-is-imported-configuration",level:4},{value:"When target is Configuration class",id:"when-target-is-configuration-class",level:4},{value:"@External",id:"external",level:3},{value:"When target is Bean",id:"when-target-is-bean-1",level:4},{value:"When target is Imported Configuration",id:"when-target-is-imported-configuration-1",level:4},{value:"When target is Configuration class",id:"when-target-is-configuration-class-1",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"internal-and-external",children:"@Internal and @External"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"@Internal"})," and ",(0,o.jsx)(n.code,{children:"@External"})," annotations are used to specify the visibility of a ",(0,o.jsx)(n.code,{children:"Bean"})," or ",(0,o.jsx)(n.code,{children:"Configuration Import"}),".\nBoth annotations can be applied to bean declarations and to ",(0,o.jsx)(n.code,{children:"Configuration/ClawjectApplication"})," classes."]}),"\n",(0,o.jsx)(n.p,{children:"By default - if no visibility annotation is specified - a bean or configuration import is visible to all other beans and configuration imports across the whole application."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["You can re-define the default visibility of ",(0,o.jsx)(n.a,{href:"/docs/configuration#beansdefaultexternal",children:"beans"})," and ",(0,o.jsx)(n.a,{href:"/docs/configuration#importsdefaultexternal",children:"configuration imports"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["When defined on a ",(0,o.jsx)(n.code,{children:"Bean"})," or ",(0,o.jsx)(n.code,{children:"Configuration Import"}),", the ",(0,o.jsx)(n.code,{children:"@Internal"})," and ",(0,o.jsx)(n.code,{children:"@External"})," annotations are used to specify the visibility of the bean or configuration import in the context of the class in which it.\nWhen defined on a ",(0,o.jsx)(n.code,{children:"Configuration/ClawjectApplication"})," class, the ",(0,o.jsx)(n.code,{children:"@Internal"})," and ",(0,o.jsx)(n.code,{children:"@External"})," annotations are used to specify the visibility of all beans and configuration imports defined in the class."]}),"\n",(0,o.jsx)(n.admonition,{title:"Note that",type:"tip",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Bean"}),"/",(0,o.jsx)(n.code,{children:"Configuration Import"})," level annotations have precedence over class level annotations."]}),"\n",(0,o.jsx)(n.li,{children:"Both decorators are mutually exclusive and cannot be used together in the same element."}),"\n",(0,o.jsxs)(n.li,{children:["Both decorators are interchangeable, ",(0,o.jsx)(n.code,{children:"@Internal(false)"})," is equivalent to ",(0,o.jsx)(n.code,{children:"@External"})," and ",(0,o.jsx)(n.code,{children:"@External(false)"})," is equivalent to ",(0,o.jsx)(n.code,{children:"@Internal"}),"."]}),"\n"]})}),"\n",(0,o.jsx)(n.h3,{id:"internal",children:"@Internal"}),"\n",(0,o.jsx)(n.p,{children:"It Indicates that the bean or configuration import is only visible within the class in which it is applied.\nWhen applied on class level, all beans and configuration imports defined in the class are only visible within the class."}),"\n",(0,o.jsx)(n.h4,{id:"when-target-is-bean",children:"When target is Bean"}),"\n",(0,o.jsxs)(n.p,{children:["Lets defined ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," which contain ",(0,o.jsx)(n.code,{children:"BarService"})," and ",(0,o.jsx)(n.code,{children:"BazService"})," beans.\n",(0,o.jsx)(n.code,{children:"BarService"})," will be visible only within ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," class and ",(0,o.jsx)(n.code,{children:"BazService"})," will be visible outside of ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="foo-configuration.ts"',children:"import { Bean, Configuration, Internal } from '@clawject/di';\nimport { BarService } from './bar-service';\nimport { BazService } from './baz-service';\n\n@Configuration\nexport class FooConfiguration {\n  @Internal barService = Bean(BarService);\n  bazService = Bean(BazService);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now lets import ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," in ",(0,o.jsx)(n.code,{children:"Application"})," and try to access ",(0,o.jsx)(n.code,{children:"BarService"})," and ",(0,o.jsx)(n.code,{children:"BazService"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="application.ts"',children:"import { ClawjectApplication, Import, PostConstruct } from '@clawject/di';\nimport { FooConfiguration } from './foo-configuration';\nimport { BarService } from './bar-service';\nimport { BazService } from './baz-service';\n\n@ClawjectApplication\nclass Application {\n  fooConfiguration = Import(FooConfiguration);\n\n  @PostConstruct\n  postConstruct(\n    /* BarService is not visible here and compilation error will be reported */\n    barService: BarService,\n    /* BazService is visible here and will be injected */\n    bazService: BazService\n  ): void {}\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"when-target-is-imported-configuration",children:"When target is Imported Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Lets defined ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," which contain ",(0,o.jsx)(n.code,{children:"FooService"})," bean.\n",(0,o.jsx)(n.code,{children:"FooService"})," will be visible to everyone that imports ",(0,o.jsx)(n.code,{children:"FooConfiguration"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="foo-configuration.ts"',children:"import { Bean, Configuration } from '@clawject/di';\nimport { FooService } from './foo-service';\n\n@Configuration\nexport class FooConfiguration {\n  fooService = Bean(FooService);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now lets import ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," in ",(0,o.jsx)(n.code,{children:"BarConfiguration"}),", mark an import as ",(0,o.jsx)(n.code,{children:"@Internal"})," and try to access ",(0,o.jsx)(n.code,{children:"FooService"})," bean."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="bar-configuration.ts"',children:"import { Configuration, Import, Internal, PostConstruct } from '@clawject/di';\nimport { FooConfiguration } from './foo-configuration';\nimport { FooService } from './foo-service';\n\n@Configuration\nexport class BarConfiguration {\n  @Internal fooConfiguration = Import(FooConfiguration);\n\n  @PostConstruct\n  postConstruct(\n    /* FooService is visible here and will be injected */\n    fooService: FooService,\n  ): void {}\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now we define ",(0,o.jsx)(n.code,{children:"Application"}),", import ",(0,o.jsx)(n.code,{children:"BarConfiguration"})," and try to access ",(0,o.jsx)(n.code,{children:"FooService"})," bean."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="application.ts"',children:"import { ClawjectApplication, Import, PostConstruct } from '@clawject/di';\nimport { BarConfiguration } from './bar-configuration';\nimport { FooService } from './foo-service';\n\n@ClawjectApplication\nclass Application {\n  barConfiguration = Import(BarConfiguration);\n\n  @PostConstruct\n  postConstruct(\n    /* FooService is not visible here and compilation error will be reported */\n    fooService: FooService,\n  ): void {}\n}\n\n"})}),"\n",(0,o.jsx)(n.h4,{id:"when-target-is-configuration-class",children:"When target is Configuration class"}),"\n",(0,o.jsxs)(n.p,{children:["Lets defined ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," which contain ",(0,o.jsx)(n.code,{children:"BarService"})," and ",(0,o.jsx)(n.code,{children:"BazService"})," beans.\n",(0,o.jsx)(n.code,{children:"BarService"})," and ",(0,o.jsx)(n.code,{children:"BazService"})," will not be visible outside of ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="foo-configuration.ts"',children:"import { Bean, Configuration, Internal } from '@clawject/di';\nimport { BarService } from './bar-service';\nimport { BazService } from './baz-service';\n\n@Configuration\n@Internal\nexport class FooConfiguration {\n  barService = Bean(BarService);\n  bazService = Bean(BazService);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now lets import ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," in ",(0,o.jsx)(n.code,{children:"Application"})," and try to access ",(0,o.jsx)(n.code,{children:"BarService"})," and ",(0,o.jsx)(n.code,{children:"BazService"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="application.ts"',children:"import { ClawjectApplication, Import, PostConstruct } from '@clawject/di';\nimport { FooConfiguration } from './foo-configuration';\nimport { BarService } from './bar-service';\nimport { BazService } from './baz-service';\n\n@ClawjectApplication\nexport class Application {\n  fooConfiguration = Import(FooConfiguration);\n\n  @PostConstruct\n  postConstruct(\n    /* BarService is not visible here and compilation error will be reported */\n    barService: BarService,\n    /* BazService is not visible here and compilation error will be reported */\n    bazService: BazService\n  ): void {}\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"external",children:"@External"}),"\n",(0,o.jsx)(n.p,{children:"It Indicates that the bean or configuration import is visible outside the class in which they are defined.\nWhen applied on class level, all beans and configuration imports defined in the class become visible outside the class."}),"\n",(0,o.jsx)(n.h4,{id:"when-target-is-bean-1",children:"When target is Bean"}),"\n",(0,o.jsxs)(n.p,{children:["Lets defined ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," which contain ",(0,o.jsx)(n.code,{children:"FooService"})," bean.\n",(0,o.jsx)(n.code,{children:"BarService"})," will be visible outside of ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="foo-configuration.ts"',children:"import { Bean, Configuration, External } from '@clawject/di';\nimport { FooService } from './foo-service';\n\n@Configuration\nexport class FooConfiguration {\n  @External fooService = Bean(FooService);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now lets import ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," in ",(0,o.jsx)(n.code,{children:"Application"})," and try to access ",(0,o.jsx)(n.code,{children:"BarService"})," and ",(0,o.jsx)(n.code,{children:"BazService"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="application.ts"',children:"import { ClawjectApplication, Import, PostConstruct } from '@clawject/di';\nimport { FooConfiguration } from './foo-configuration';\nimport { FooService } from './foo-service';\n\n@ClawjectApplication\nclass Application {\n  fooConfiguration = Import(FooConfiguration);\n\n  @PostConstruct\n  postConstruct(\n    /* FooService is visible here and will be injected */\n    fooService: FooService\n  ): void {}\n}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"when-target-is-imported-configuration-1",children:"When target is Imported Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["Lets defined ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," which contain ",(0,o.jsx)(n.code,{children:"FooService"})," bean.\n",(0,o.jsx)(n.code,{children:"FooService"})," will be visible to everyone that imports ",(0,o.jsx)(n.code,{children:"FooConfiguration"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="foo-configuration.ts"',children:"import { Bean, Configuration, @External } from '@clawject/di';\nimport { FooService } from './foo-service';\n\n@Configuration\nexport class FooConfiguration {\n  @External fooService = Bean(FooService);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now lets import ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," in ",(0,o.jsx)(n.code,{children:"BarConfiguration"}),", mark an import as ",(0,o.jsx)(n.code,{children:"@External"})," and try to access ",(0,o.jsx)(n.code,{children:"FooService"})," bean."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="bar-configuration.ts"',children:"import { Configuration, Import, External, PostConstruct } from '@clawject/di';\nimport { FooConfiguration } from './foo-configuration';\nimport { FooService } from './foo-service';\n\n@Configuration\nexport class BarConfiguration {\n  @External fooConfiguration = Import(FooConfiguration);\n\n  @PostConstruct\n  postConstruct(\n    /* FooService is visible here and will be injected */\n    fooService: FooService,\n  ): void {}\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now we define ",(0,o.jsx)(n.code,{children:"Application"}),", import ",(0,o.jsx)(n.code,{children:"BarConfiguration"})," and try to access ",(0,o.jsx)(n.code,{children:"FooService"})," bean."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="application.ts"',children:"import { ClawjectApplication, Import, PostConstruct } from '@clawject/di';\nimport { BarConfiguration } from './bar-configuration';\nimport { FooService } from './foo-service';\n\n@ClawjectApplication\nclass Application {\n  barConfiguration = Import(BarConfiguration);\n\n  @PostConstruct\n  postConstruct(\n    /* FooService is visible here and will be injected */\n    fooService: FooService,\n  ): void {}\n}\n\n"})}),"\n",(0,o.jsx)(n.h4,{id:"when-target-is-configuration-class-1",children:"When target is Configuration class"}),"\n",(0,o.jsxs)(n.p,{children:["Lets defined ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," which contain ",(0,o.jsx)(n.code,{children:"BarService"})," and ",(0,o.jsx)(n.code,{children:"BazService"})," beans.\n",(0,o.jsx)(n.code,{children:"BarService"})," and ",(0,o.jsx)(n.code,{children:"BazService"})," will be visible outside of ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="foo-configuration.ts"',children:"import { Bean, Configuration, External } from '@clawject/di';\nimport { BarService } from './bar-service';\nimport { BazService } from './baz-service';\n\n@Configuration\n@External\nexport class FooConfiguration {\n  barService = Bean(BarService);\n  bazService = Bean(BazService);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Now lets import ",(0,o.jsx)(n.code,{children:"FooConfiguration"})," in ",(0,o.jsx)(n.code,{children:"Application"})," and try to access ",(0,o.jsx)(n.code,{children:"BarService"})," and ",(0,o.jsx)(n.code,{children:"BazService"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",metastring:'title="application.ts"',children:"import { ClawjectApplication, Import, PostConstruct } from '@clawject/di';\nimport { FooConfiguration } from './foo-configuration';\nimport { BarService } from './bar-service';\nimport { BazService } from './baz-service';\n\n@ClawjectApplication\nexport class Application {\n  fooConfiguration = Import(FooConfiguration);\n\n  @PostConstruct\n  postConstruct(\n    /* BarService is visible here and will be injected */\n    barService: BarService,\n    /* BazService is visible here and will be injected */\n    bazService: BazService\n  ): void {}\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>a});var o=i(7294);const r={},t=o.createContext(r);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);