"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Introduction","href":"/docs/","docId":"intro","unlisted":false},{"type":"link","label":"Setup \ud83d\udee0\ufe0f","href":"/docs/setup","docId":"setup","unlisted":false},{"type":"link","label":"Language Service \u2728","href":"/docs/language-service","docId":"language-service","unlisted":false},{"type":"link","label":"Configuration \ud83d\udd2e","href":"/docs/configuration","docId":"configuration","unlisted":false},{"type":"category","label":"Core Concepts","collapsed":false,"items":[{"type":"link","label":"IoC and DI","href":"/docs/core-concepts/ioc-di-basics","docId":"core-concepts/ioc-di-basics","unlisted":false},{"type":"link","label":"Clawject IoC Container","href":"/docs/core-concepts/clawject-ioc","docId":"core-concepts/clawject-ioc","unlisted":false},{"type":"link","label":"Clawject Type System","href":"/docs/core-concepts/type-system","docId":"core-concepts/type-system","unlisted":false}],"collapsible":true},{"type":"category","label":"API","collapsed":false,"items":[{"type":"link","label":"@Configuration","href":"/docs/api/configuration-decorator","docId":"api/configuration-decorator","unlisted":false},{"type":"link","label":"@ClawjectApplication","href":"/docs/api/clawject-application","docId":"api/clawject-application","unlisted":false},{"type":"link","label":"ClawjectFactory","href":"/docs/api/clawject-factory","docId":"api/clawject-factory","unlisted":false},{"type":"link","label":"ClawjectApplicationContext","href":"/docs/api/clawject-application-context","docId":"api/clawject-application-context","unlisted":false},{"type":"link","label":"ExportBeans","href":"/docs/api/expose-beans","docId":"api/expose-beans","unlisted":false},{"type":"link","label":"Import","href":"/docs/api/import","docId":"api/import","unlisted":false},{"type":"link","label":"ScopeRegister","href":"/docs/api/scope-register","docId":"api/scope-register","unlisted":false},{"type":"link","label":"Bean","href":"/docs/api/bean","docId":"api/bean","unlisted":false},{"type":"link","label":"@PostConstruct @PreDestroy","href":"/docs/api/lifecycle","docId":"api/lifecycle","unlisted":false},{"type":"link","label":"@Embedded","href":"/docs/api/embedded","docId":"api/embedded","unlisted":false},{"type":"link","label":"@Lazy","href":"/docs/api/lazy","docId":"api/lazy","unlisted":false},{"type":"link","label":"@Primary","href":"/docs/api/primary","docId":"api/primary","unlisted":false},{"type":"link","label":"@Qualifier","href":"/docs/api/qualifier","docId":"api/qualifier","unlisted":false},{"type":"link","label":"@Scope","href":"/docs/api/scope","docId":"api/scope","unlisted":false}],"collapsible":true},{"type":"category","label":"Advanced Concepts","collapsed":true,"items":[{"type":"link","label":"Inject Arrays and Collections","href":"/docs/advanced-concepts/injecting-collections","docId":"advanced-concepts/injecting-collections","unlisted":false},{"type":"link","label":"Custom Scopes","href":"/docs/advanced-concepts/custom-scopes","docId":"advanced-concepts/custom-scopes","unlisted":false}],"collapsible":true},{"type":"link","label":"Errors","href":"/docs/errors","docId":"errors","unlisted":false}]},"docs":{"advanced-concepts/custom-scopes":{"id":"advanced-concepts/custom-scopes","title":"Custom Scopes","description":"Out of the box, Clawject provides 3 scopes: singleton, transient and fresh, but sometimes you may need to define your own scopes.","sidebar":"docs"},"advanced-concepts/injecting-collections":{"id":"advanced-concepts/injecting-collections","title":"Inject Arrays and Collections","description":"Sometimes you need to inject an array or collection of beans into another bean,","sidebar":"docs"},"api/bean":{"id":"api/bean","title":"Bean","description":"Bean is an object that is managed and constructed by Clawject container it can have dependencies,","sidebar":"docs"},"api/clawject-application":{"id":"api/clawject-application","title":"@ClawjectApplication","description":"@ClawjectApplication decorator is used to indicate that a class is an entry point of the application.","sidebar":"docs"},"api/clawject-application-context":{"id":"api/clawject-application-context","title":"ClawjectApplicationContext","description":"ClawjectApplicationContext is an object that represents the context of the Clawject application.","sidebar":"docs"},"api/clawject-factory":{"id":"api/clawject-factory","title":"ClawjectFactory","description":"It\'s a factory class that creates a ClawjectApplicationContext instance.","sidebar":"docs"},"api/configuration-decorator":{"id":"api/configuration-decorator","title":"@Configuration","description":"@Configuration is a class decorator indicating that a target class is a source of bean definitions,","sidebar":"docs"},"api/embedded":{"id":"api/embedded","title":"@Embedded","description":"Clawject provides @Embedded decorator that allows to register elements from a plain object as a beans.","sidebar":"docs"},"api/expose-beans":{"id":"api/expose-beans","title":"ExportBeans","description":"","sidebar":"docs"},"api/import":{"id":"api/import","title":"Import","description":"","sidebar":"docs"},"api/lazy":{"id":"api/lazy","title":"@Lazy","description":"By default, Clawject creates all singleton beans eagerly at the initialization of the context.","sidebar":"docs"},"api/lifecycle":{"id":"api/lifecycle","title":"@PostConstruct @PreDestroy","description":"Clawject allows us to attach custom actions to bean or context creation and destruction,","sidebar":"docs"},"api/primary":{"id":"api/primary","title":"@Primary","description":"@Primary decorator exists to provide preference to a specific bean when there are multiple beans of the same type available.","sidebar":"docs"},"api/qualifier":{"id":"api/qualifier","title":"@Qualifier","description":"@Qualifier decorator allows us to specify a name for a bean.","sidebar":"docs"},"api/scope":{"id":"api/scope","title":"@Scope","description":"The Scope of Bean is a way to define when Bean will be created and how it is managed by container.","sidebar":"docs"},"api/scope-register":{"id":"api/scope-register","title":"ScopeRegister","description":"ScopeRegister serves as the main entry point for working with scopes.","sidebar":"docs"},"configuration":{"id":"configuration","title":"Configuration \ud83d\udd2e","description":"Clawject using cosmiconfig to load configuration from different sources.","sidebar":"docs"},"core-concepts/clawject-ioc":{"id":"core-concepts/clawject-ioc","title":"Clawject IoC Container","description":"An IoC container is a common characteristic of frameworks that implement IoC.","sidebar":"docs"},"core-concepts/ioc-di-basics":{"id":"core-concepts/ioc-di-basics","title":"IoC and DI","description":"In this section, we will explore the principles of Inversion of Control (IoC) and Dependency Injection (DI).","sidebar":"docs"},"core-concepts/type-system":{"id":"core-concepts/type-system","title":"Clawject Type System","description":"Clawject type system following a typescript type system as much as possible,","sidebar":"docs"},"errors":{"id":"errors","title":"Errors","description":"Compile-time and runtime errors.","sidebar":"docs"},"intro":{"id":"intro","title":"Introduction","description":"Clawject is TypeScript Dependency Injection framework that\'s here to make your coding life easier.","sidebar":"docs"},"language-service":{"id":"language-service","title":"Language Service \u2728","description":"The Clawject Language Service provides code editors (VSCode, WebStorm, etc.) with a way to get errors","sidebar":"docs"},"setup":{"id":"setup","title":"Setup \ud83d\udee0\ufe0f","description":"Prerequisites","sidebar":"docs"}}}')}}]);