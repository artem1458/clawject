"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1236],{5561:(n,o,e)=>{e.r(o),e.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var t=e(5893),i=e(1151);const r={title:"Import",hide_title:!0},a=void 0,s={id:"fundamentals/import",title:"Import",description:"Import",source:"@site/docs/fundamentals/import.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/import",permalink:"/docs/fundamentals/import",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1709063070,formattedLastUpdatedAt:"Feb 27, 2024",frontMatter:{title:"Import",hide_title:!0},sidebar:"docs",previous:{title:"ClawjectApplicationContext",permalink:"/docs/fundamentals/clawject-application-context"},next:{title:"Bean",permalink:"/docs/fundamentals/bean"}},c={},l=[{value:"Import",id:"import",level:2},{value:"Usage",id:"usage",level:3},{value:"Importing configuration with constructor parameters",id:"importing-configuration-with-constructor-parameters",level:3},{value:"Importing configuration multiple times in the same application",id:"importing-configuration-multiple-times-in-the-same-application",level:3}];function p(n){const o={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h2,{id:"import",children:"Import"}),"\n",(0,t.jsxs)(o.p,{children:["Import function allows you to import a ",(0,t.jsx)(o.code,{children:"@Configuration"})," class into the target ",(0,t.jsx)(o.code,{children:"@Configuration"})," class to use beans that is provided by imported configuration."]}),"\n",(0,t.jsx)(o.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(o.p,{children:["Let's define ",(0,t.jsx)(o.code,{children:"CoreFoo"})," class and corresponding interface."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",metastring:'title="core-foo.ts"',children:"export interface ICoreFoo {\n  foo(): string;\n}\n\nexport class CoreFoo implements ICoreFoo {\n  foo() {\n    return 'foo';\n  }\n}\n"})}),"\n",(0,t.jsx)(o.p,{children:"Lets define CoreConfiguration class."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",metastring:'title="core-configuration.ts"',children:"import { Bean, Configuration } from '@clawject/di';\nimport { CoreFoo } from './core-foo';\n\n@Configuration\nexport class CoreConfiguration {\n  coreFoo = Bean(CoreFoo);\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["Let's define ",(0,t.jsx)(o.code,{children:"BarService"})," that depends on ",(0,t.jsx)(o.code,{children:"ICoreFoo"}),"."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",metastring:'title="bar-service.ts"',children:"import { ICoreFoo } from './core-foo';\n\nexport class BarService {\n  constructor(private coreFoo: ICoreFoo) {}\n\n  invokeFoo() {\n    this.coreFoo.foo();\n  }\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["Now we can import ",(0,t.jsx)(o.code,{children:"CoreConfiguration"})," to another configuration or application class."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",metastring:'title="bar-configuration.ts"',children:"import { Bean, Configuration, Import } from '@clawject/di';\nimport { CoreConfiguration } from './core-configuration';\nimport { BarService } from './bar-service';\n\n@Configuration\nexport class BarConfiguration {\n  coreConfiguration = Import(CoreConfiguration);\n\n  barService = Bean(BarService);\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["Now ",(0,t.jsx)(o.code,{children:"BarConfiguration"})," can be imported to the application class and expose ",(0,t.jsx)(o.code,{children:"BarService"})," from container."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",metastring:'title="application.ts"',children:"import { ClawjectApplication, Import } from '@clawject/di';\nimport { BarConfiguration } from './bar-configuration';\nimport { ExposeBeans } from './ExposeBeans';\n\n@ClawjectApplication\nexport class Application {\n  barConfiguration = Import(BarConfiguration);\n\n  exposedBeans = ExposeBeans<{ barService: BarService }>()\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["After all configuration trees are built, ",(0,t.jsx)(o.code,{children:"BarService"})," will be able to inject ",(0,t.jsx)(o.code,{children:"CoreFoo"})," bean by interface."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",metastring:'title="main.ts"',children:"import { ClawjectFactory } from '@clawject/di';\nimport { Application } from './application';\n\nconst applicationContext = await ClawjectFactory.createApplicationContext(Application);\nconst barService = await applicationContext.getExposedBean('barService');\n\nbarService.invokeFoo(); // 'foo' will be printed to the console.\n"})}),"\n",(0,t.jsx)(o.h3,{id:"importing-configuration-with-constructor-parameters",children:"Importing configuration with constructor parameters"}),"\n",(0,t.jsxs)(o.p,{children:["If the configuration class contains constructor, you should pass the constructor arguments as the second parameter to ",(0,t.jsx)(o.code,{children:"Import"})," statement.\nConstructor arguments can be either:"]}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:"Array of constructor arguments"}),"\n",(0,t.jsx)(o.li,{children:"Function that returns an array of values"}),"\n",(0,t.jsx)(o.li,{children:"Function that returns a Promise that resolves to an array of values"}),"\n"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",children:"import { ClawjectApplication, Configuration, Import } from '@clawject/di';\n\n@Configuration\nclass FooConfiguration {\n  constructor(\n    private readonly someConfigurationValue: string,\n  ) {}\n}\n\n@Configuration\nclass BarConfiguration {\n  // Pass an array of values\n  fooConfiguration = Import(FooConfiguration, ['some value']);\n  // Pass a function that returns an array of values\n  fooConfiguration = Import(FooConfiguration, () => ['some value'] as const);\n  // Pass a function that returns a Promise that resolves to an array of values\n  fooConfiguration = Import(FooConfiguration, async () => {\n    const configurationValue = await fetchValue('https://...');\n\n    return [configurationValue] as const;\n  });\n}\n"})}),"\n",(0,t.jsx)(o.h3,{id:"importing-configuration-multiple-times-in-the-same-application",children:"Importing configuration multiple times in the same application"}),"\n",(0,t.jsx)(o.p,{children:"It is possible to import the same configuration multiple times in bounds of the same application.\nIn this case, beans that are defined in imported configuration will be created only once and shared between all importers."}),"\n",(0,t.jsx)(o.admonition,{type:"tip",children:(0,t.jsxs)(o.p,{children:["Clawject will report you info in the IDE about the fact that the configuration is imported as ",(0,t.jsx)(o.a,{href:"/docs/fundamentals/internal-external#external",children:"external"})," multiple times, and import can be omitted."]})}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",metastring:'title="main.ts" showLineNumbers',children:"import { ClawjectApplication, Configuration, Import } from '@clawject/di';\n\n@Configuration\nclass FooConfiguration {\n  // ...\n}\n\n@Configuration\nclass BarConfiguration {\n  /**\n  * CI1: This configuration is already imported.\n  * main.ts(20, 3): `fooConfiguration` is declared here.\n  */\n  fooConfiguration = Import(FooConfiguration);\n}\n\n@ClawjectApplication\nclass Application {\n  /**\n  * CI1: This configuration is already imported.\n  * main.ts(11, 3): `fooConfiguration` is declared here.\n  */\n  fooConfiguration = Import(FooConfiguration);\n  barConfiguration = Import(BarConfiguration);\n}\n\n"})})]})}function u(n={}){const{wrapper:o}={...(0,i.a)(),...n.components};return o?(0,t.jsx)(o,{...n,children:(0,t.jsx)(p,{...n})}):p(n)}},1151:(n,o,e)=>{e.d(o,{Z:()=>s,a:()=>a});var t=e(7294);const i={},r=t.createContext(i);function a(n){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(o):{...o,...n}}),[o,n])}function s(n){let o;return o=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),t.createElement(r.Provider,{value:o},n.children)}}}]);