"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[330],{4641:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=t(5893),a=t(1151),s=t(4866),i=t(5162);const l={title:"Clawject Type System"},o=void 0,c={id:"core-concepts/type-system",title:"Clawject Type System",description:"Clawject type system following a typescript type system as much as possible,",source:"@site/docs/core-concepts/type-system.mdx",sourceDirName:"core-concepts",slug:"/core-concepts/type-system",permalink:"/docs/core-concepts/type-system",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1701370759,formattedLastUpdatedAt:"Nov 30, 2023",frontMatter:{title:"Clawject Type System"},sidebar:"docs",previous:{title:"Clawject IoC Container",permalink:"/docs/core-concepts/clawject-ioc"},next:{title:"ContainerManager",permalink:"/docs/api/container-manager"}},u={},d=[{value:"Primitive types",id:"primitive-types",level:2},{value:"Object types",id:"object-types",level:2},{value:"Generic types",id:"generic-types",level:2},{value:"Intersection types",id:"intersection-types",level:2},{value:"Union types",id:"union-types",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Clawject type system following a typescript type system as much as possible,\nbut there is one major difference -\nTypeScript using\n",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html#structural-type-system",children:"structural type system (duck typing)"}),"\nbut Clawject using ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Nominal_type_system",children:"nominal typing"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["As an example - we have 2 classes ",(0,r.jsx)(n.code,{children:"Cat"})," and ",(0,r.jsx)(n.code,{children:"Dog"}),", both of them have the same properties and methods,\nif we will use ",(0,r.jsx)(n.code,{children:"Cat"})," instead of ",(0,r.jsx)(n.code,{children:"Dog"})," or vice versa -\nTypeScript will not complain about it."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Cat {\n  name = 'cat';\n  voice(): void {\n    console.log('meow');\n  }\n}\n\nclass Dog {\n  name = 'dog';\n  voice(): void {\n    console.log('woof');\n  }\n}\n\nfunction doMeow(animal: Cat): void {\n  animal.voice();\n}\n\nconst dog = new Dog();\ndoMeow(dog); // <- TypeScript will not complain about it\n"})}),"\n",(0,r.jsxs)(n.p,{children:["But clawject will and report compile error about missing Bean declaration for ",(0,r.jsx)(n.code,{children:"Cat"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Cat {\n  name = 'cat';\n  voice(): void {\n    console.log('meow');\n  }\n}\n\nclass Dog {\n  name = 'dog';\n  voice(): void {\n    console.log('woof');\n  }\n}\n\nclass MyContext extends CatContext {\n  @PostConstruct\n  doMeow(animal: Cat): void { // <- error will be reported here\n    animal.voice();\n  }\n\n  dog = Bean(Dog);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"primitive-types",children:"Primitive types"}),"\n",(0,r.jsx)(n.p,{children:"Clawject supports all base types from TypeScript:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"any | unknown"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"void | undefined"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"null"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"enum"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"bigint"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Symbol"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Also - Clawject supports literal types, literal types are compatible with base types:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["string literal: ",(0,r.jsx)(n.code,{children:"'string_literal'"})]}),"\n",(0,r.jsxs)(n.li,{children:["number literal: ",(0,r.jsx)(n.code,{children:"123"})]}),"\n",(0,r.jsxs)(n.li,{children:["boolean literal: ",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"})]}),"\n",(0,r.jsxs)(n.li,{children:["enum literal: ",(0,r.jsx)(n.code,{children:"MyEnum.FIRST"})]}),"\n",(0,r.jsxs)(n.li,{children:["bigint literal: ",(0,r.jsx)(n.code,{children:"42n"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Let's look at the example:"}),"\n",(0,r.jsxs)(s.Z,{children:[(0,r.jsx)(i.Z,{value:"explicit-type",label:"Explicit type declaration",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class MyContext extends CatContext {\n  @Bean stringLiteral: 'string_literal' = 'string_literal';\n  @Bean numberLiteral: 42 = 42;\n  @Bean booleanLiteral: true = true;\n  @Bean enumLiteral: MyEnum.FIRST = MyEnum.FIRST;\n  @Bean bigintLiteral: 42n = 42n;\n\n  @PostConstruct\n  postConstruct(\n    string: string, // <- stringLiteral bean will be injected here\n    number: number, // <- numberLiteral bean will be injected here\n    boolean: boolean, // <- booleanLiteral bean will be injected here\n    Enum: MyEnum, // <- enumLiteral bean will be injected here\n    bigint: bigint, // <- bigintLiteral bean will be injected here\n  ) {}\n}\n"})})}),(0,r.jsx)(i.Z,{value:"compact-type",label:"Compact type declaration",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class MyContext extends CatContext {\n  @Bean stringLiteral = 'string_literal' as const;\n  @Bean numberLiteral = 42 as const;\n  @Bean booleanLiteral = true as const;\n  @Bean enumLiteral = MyEnum.FIRST as const;\n  @Bean bigintLiteral = 42n as const;\n\n  @PostConstruct\n  postConstruct(\n    string: string, // <- stringLiteral bean will be injected here\n    number: number, // <- numberLiteral bean will be injected here\n    boolean: boolean, // <- booleanLiteral bean will be injected here\n    Enum: MyEnum, // <- enumLiteral bean will be injected here\n    bigint: bigint, // <- bigintLiteral bean will be injected here\n  ) {}\n}\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"object-types",children:"Object types"}),"\n",(0,r.jsxs)(n.p,{children:["Because Clawject is using nominal typing \u2014 it's relying on at type declaration name and place,\nso it's not possible to use anonymous types, but it's possible to use named types like ",(0,r.jsx)(n.code,{children:"class"}),", ",(0,r.jsx)(n.code,{children:"interface"})," or ",(0,r.jsx)(n.code,{children:"type"}),":"]}),"\n",(0,r.jsxs)(s.Z,{children:[(0,r.jsx)(i.Z,{value:"type-references",label:"Using type references",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Foo {}\ninterface Bar {}\ntype Baz = {};\n\nclass MyContext extends CatContext {\n  @Bean foo: Foo = new Foo();\n  @Bean bar: Bar = {};\n  @Bean baz: Baz = {};\n\n  @PostConstruct\n  postConstruct(\n    dep0: Foo, // <- foo bean will be injected here\n    dep1: Bar, // <- bar bean will be injected here\n    dep2: Baz, // <- baz bean will be injected here\n  ) {}\n}\n"})})}),(0,r.jsx)(i.Z,{value:"type-literals",label:"Using object-like literals",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class MyContext extends CatContext {\n  @Bean foo: { bar: string } = {bar: 'barValue'};\n\n  @PostConstruct\n  postConstruct(\n    // compilation error will be reported here, because structurally these types are identical,\n    // but they have different declarations\n    foo: { bar: string },\n  ) {}\n}\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"generic-types",children:"Generic types"}),"\n",(0,r.jsx)(n.p,{children:"Clawject has first-class support for generic types:"}),"\n",(0,r.jsxs)(s.Z,{children:[(0,r.jsx)(i.Z,{value:"string-generic",label:"String generic",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface WithGeneric<T> {\n  value: T;\n}\n\nclass MyContext extends CatContext {\n  @Bean withStringGeneric: WithGeneric<string> = {value: 'foo'};\n\n  @PostConstruct\n  postConstruct(\n    value: WithGeneric<string>,\n  ) {}\n}\n"})})}),(0,r.jsx)(i.Z,{value:"string-literal-generic",label:"String literal generic",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface WithGeneric<T> {\n  value: T;\n}\n\nclass MyContext extends CatContext {\n  @Bean withStringGeneric: WithGeneric<'string_literal'> = {value: 'string_literal'};\n\n  @PostConstruct\n  postConstruct(\n    value: WithGeneric<'string_literal'>,\n  ) {}\n}\n"})})}),(0,r.jsx)(i.Z,{value:"string-literal-generic-string",label:"String literal generic with base string",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface WithGeneric<T> {\n  value: T;\n}\n\nclass MyContext extends CatContext {\n  @Bean withStringGeneric: WithGeneric<'string_literal'> = {value: 'string_literal'};\n\n  @PostConstruct\n  postConstruct(\n    value: WithGeneric<string>,\n  ) {}\n}\n"})})}),(0,r.jsx)(i.Z,{value:"string-literal-generic-any",label:"String literal generic with any",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface WithGeneric<T> {\n  value: T;\n}\n\nclass MyContext extends CatContext {\n  @Bean withStringGeneric: WithGeneric<'string_literal'> = {value: 'string_literal'};\n\n  @PostConstruct\n  postConstruct(\n    // \"withStringGeneric\" will be injected, because 'string_literal' is compatible with any\n    value: WithGeneric<any>,\n  ) {}\n}\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"intersection-types",children:"Intersection types"}),"\n",(0,r.jsx)(n.p,{children:"Clawject fully supports intersection types as bean types, and as bean dependency types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IFoo { foo: string }\ninterface IBar { bar: string }\ninterface IBaz { baz: string }\n\nclass MyContext extends CatContext {\n  @Bean fooAndBar: IFoo & IBar = { foo: 'fooValue', bar: 'barValue' }\n  @Bean fooAndBaz: IFoo & IBaz = { foo: 'fooValue', baz: 'bazValue' }\n  @Bean fooAndBarAndBaz: IFoo & IBar & IBaz = { foo: 'fooValue', bar: 'barValue', baz: 'bazValue' }\n\n  @PostConstruct\n  postConstruct(\n    dep0: IFoo & IBar, // <- \"fooAndBar\" will be injected\n    dep1: IFoo & IBaz, // <- \"fooAndBaz\" will be injected\n    dep2: IFoo & IBar & IBaz, // <- \"fooAndBarAndBaz\" will be injected\n  ) {}\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Clawject also can resolve complex generic types as a dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Repository<T> {}\nclass Service<T> {\n  constructor(\n    private repository: Repository<T>,\n  ) {}\n}\n\ninterface Foo { foo: string }\ninterface Bar { bar: string }\n\nclass MyContext extends CatContext {\n  fooRepository = Bean(Repository<Foo>);\n  barRepository = Bean(Repository<Bar>);\n  fooService = Bean(Service<Foo>)  // <- "fooRepository" will be injected as a "repository" dependency\n\n  @PostConstruct\n  postConstruct(\n    service: Service<Foo>, // <- "fooService" will be injected\n  ) {}\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"union-types",children:"Union types"}),"\n",(0,r.jsx)(n.p,{children:"Clawject supports union types only as a bean dependency types,\nso it's not possible to create a bean with a union type, but it's possible to request a bean using a union type:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"interface IFoo { foo: string }\ninterface IBar { bar: string }\n\nclass MyContext extends CatContext {\n  @Bean bar: IBar = { bar: 'barValue' }\n  @Bean foo: IFoo = { foo: 'fooValue' }\n\n  @PostConstruct\n  postConstruct(\n    dep0: IFoo | IBar, // <- \"bar\" will be injected here, because it was registered as a bean before 'foo'\n  ) {}\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},5162:(e,n,t)=>{t.d(n,{Z:()=>i});t(7294);var r=t(6010);const a={tabItem:"tabItem_Ymn6"};var s=t(5893);function i(e){let{children:n,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,i),hidden:t,children:n})}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var r=t(7294),a=t(6010),s=t(2466),i=t(6550),l=t(469),o=t(1980),c=t(7392),u=t(12);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o._X)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=p(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,d]=b({queryString:t,groupId:a}),[g,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,u.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),m=(()=>{const e=c??g;return h({value:e,tabValues:s})?e:null})();(0,l.Z)((()=>{m&&o(m)}),[m]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),x(e)}),[d,x,s]),tabValues:s}}var x=t(2389);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(5893);function j(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),a=l[t].value;a!==r&&(c(n),i(a))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>o.push(e),onKeyDown:d,onClick:u,...s,className:(0,a.Z)("tabs__item",m.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function f(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=g(e);return(0,y.jsxs)("div",{className:(0,a.Z)("tabs-container",m.tabList),children:[(0,y.jsx)(j,{...e,...n}),(0,y.jsx)(f,{...e,...n})]})}function w(e){const n=(0,x.Z)();return(0,y.jsx)(v,{...e,children:d(e.children)},String(n))}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>i});var r=t(7294);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);