"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[276],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>C});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),g=a,C=d["".concat(c,".").concat(g)]||d[g]||m[g]||o;return n?i.createElement(C,r(r({ref:t},p),{},{components:n})):i.createElement(C,r({ref:t},p))}));function C(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3842:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const o={title:"ContainerManager",id:"container-manager"},r=void 0,l={unversionedId:"concepts/container-manager",id:"concepts/container-manager",title:"ContainerManager",description:"Overview",source:"@site/docs/03-concepts/02-ContainerManager.mdx",sourceDirName:"03-concepts",slug:"/concepts/container-manager",permalink:"/docs/concepts/container-manager",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"ContainerManager",id:"container-manager"},sidebar:"tutorialSidebar",previous:{title:"Intro to IoC and DI",permalink:"/docs/concepts/ioc-di"},next:{title:"CatContext",permalink:"/docs/concepts/cat-context"}},c={},s=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Methods overview",id:"methods-overview",level:2},{value:"<code>ContainerManager.init</code>",id:"containermanagerinit",level:3},{value:"Init context",id:"init-context",level:4},{value:"Init context with a specific key",id:"init-context-with-a-specific-key",level:4},{value:"Init context with an external configuration",id:"init-context-with-an-external-configuration",level:4},{value:"<code>ContainerManager.get</code>",id:"containermanagerget",level:3},{value:"Get initialized context",id:"get-initialized-context",level:4},{value:"Get initialized context by key",id:"get-initialized-context-by-key",level:4},{value:"Get context but not initializing it",id:"get-context-but-not-initializing-it",level:4},{value:"<code>ContainerManager.getOrInit</code>",id:"containermanagergetorinit",level:3},{value:"Get and init context",id:"get-and-init-context",level:4}],p={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"ContainerManager is a main entry point to work with DI.\nYou can use ContainerManager to initialize, get or clear contexts."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Let's assume you're defined you context class like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="MyContext.ts"',title:'"MyContext.ts"'},"import { CatContext } from 'clawject';\n\nexport class MyContext extends CatContext { /* ... */ }\n")),(0,a.kt)("p",null,"To init container, you need to use ContainerManager object and pass context class to the ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="main.ts"',title:'"main.ts"'},"import { ContainerManager } from 'clawject'; \nimport { MyContext } from './MyContext';\n\nContainerManager.init(MyContext);\n")),(0,a.kt)("h2",{id:"methods-overview"},"Methods overview"),(0,a.kt)("h3",{id:"containermanagerinit"},(0,a.kt)("inlineCode",{parentName:"h3"},"ContainerManager.init")),(0,a.kt)("p",null,"Init method is used to initialize CatContext and retrieve ",(0,a.kt)("inlineCode",{parentName:"p"},"InitializedContext")," object."),(0,a.kt)("p",null,"If context was already initialized but not cleared - new context will be initialized will replace old one.\nNot clearing context can cause memory leaks."),(0,a.kt)("h4",{id:"init-context"},"Init context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ContainerManager, CatContext } from 'clawject';\n\nclass MyContext extends CatContext { /* ... */ }\n\nconst myContext = ContainerManager.init(MyContext);\n")),(0,a.kt)("h4",{id:"init-context-with-a-specific-key"},"Init context with a specific key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ContainerManager, CatContext } from 'clawject';\n\nclass MyContext extends CatContext { /* ... */ }\n\nconst myKey = new Symbol('my-context');\n\nconst myContext = ContainerManager.init(MyContext, { key: myKey });\n")),(0,a.kt)("h4",{id:"init-context-with-an-external-configuration"},"Init context with an external configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ContainerManager, CatContext } from 'clawject';\n\ninterface IExternalConfiguration { /* ... */ }\n\nclass MyContext extends CatContext<{}, IExternalConfiguration> { /* ... */ }\n\nconst externalConfiguration: IExternalConfiguration = { /* ... */ }\n\nconst myContext = ContainerManager.init(MyContext, { config: externalConfiguration });\n")),(0,a.kt)("h3",{id:"containermanagerget"},(0,a.kt)("inlineCode",{parentName:"h3"},"ContainerManager.get")),(0,a.kt)("p",null,"Get method is used to retrieve ",(0,a.kt)("inlineCode",{parentName:"p"},"InitializedContext")," object if context it was initialized."),(0,a.kt)("h4",{id:"get-initialized-context"},"Get initialized context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ContainerManager, CatContext } from 'clawject';\n\nclass MyContext extends CatContext { /* ... */ }\n\nContainerManager.init(MyContext);\n\nconst initializedContext = ContainerManager.get(MyContext);\n")),(0,a.kt)("h4",{id:"get-initialized-context-by-key"},"Get initialized context by key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ContainerManager, CatContext } from 'clawject';\n\nclass MyContext extends CatContext { /* ... */ }\n\nconst myKey = new Symbol('my-context');\n\nContainerManager.init(MyContext, { key: myKey });\n\nconst initializedContext = ContainerManager.get(MyContext, { key: myKey });\n")),(0,a.kt)("h4",{id:"get-context-but-not-initializing-it"},"Get context but not initializing it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ContainerManager, CatContext } from 'clawject';\n\nclass MyContext extends CatContext { /* ... */ }\n\nconst myKey = new Symbol('my-context');\n\ntry {\n    ContainerManager.get(MyContext, { key: myKey });\n} catch (error) {\n    console.log(error.message); // <-- Will print \"Context 'MyContext' with key 'Symbol(my-context)' is not initialized\"\n}\n")),(0,a.kt)("h3",{id:"containermanagergetorinit"},(0,a.kt)("inlineCode",{parentName:"h3"},"ContainerManager.getOrInit")),(0,a.kt)("p",null,"This method is a combination of ",(0,a.kt)("inlineCode",{parentName:"p"},"init")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"get")," methods."),(0,a.kt)("p",null,"If context was not initialized, it will be initialized and ",(0,a.kt)("inlineCode",{parentName:"p"},"InitializedContext")," object will be returned.",(0,a.kt)("br",null),"If context was initialized, ",(0,a.kt)("inlineCode",{parentName:"p"},"InitializedContext")," object will be returned."),(0,a.kt)("h4",{id:"get-and-init-context"},"Get and init context"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ContainerManager, CatContext } from 'clawject';\n\nclass MyContext extends CatContext {}\n\nconst initializedContext1 = ContainerManager.getOrInit(MyContext);\nconst initializedContext2 = ContainerManager.getOrInit(MyContext);\n\nconsole.log(initializedContext1 === initializedContext2); // <-- Will print \"true\"\n")))}m.isMDXComponent=!0}}]);