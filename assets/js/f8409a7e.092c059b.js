"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3206],{3469:(e,n,t)=>{t.r(n),t.d(n,{NestJSLogo:()=>h,SpringLogo:()=>g,assets:()=>u,contentTitle:()=>p,default:()=>O,frontMatter:()=>d,metadata:()=>w,toc:()=>j});var r=t(5893),s=t(1151),i=(t(7294),t(4866)),o=t(5162),a=t(9286),c=t(5758);const l=()=>{const e=(0,c.X)("\ninterface Cat { /* ... */ }\ninterface Dog { /* ... */ }\ninterface PetOwner<T> {}\n\nclass PetOwnerImpl<T> implements PetOwner<T> { /* ... */ }\n\nclass OwnersService {\n  constructor(\n    private catOwner: PetOwner<Cat>,\n    private dogOwner: PetOwner<Dog>,\n  ) {}\n}\n\n@ClawjectApplication\nclass Application {\n  catOwner = Bean(PetOwnerImpl<Cat>)\n  dogOwner = Bean(PetOwnerImpl<Dog>)\n  ownersService = Bean(OwnersService)\n}\n    ","typescript"),n=(0,c.X)("\ninterface Cat { /* ... */ }\ninterface Dog { /* ... */ }\ninterface PetOwner<T> {}\n\n@Injectable()\nclass PetOwnerImpl<T> implements PetOwner<T> { /* ... */ }\n\nconst InjectionTokens = {\n  CatOwner: Symbol('CatOwner'),\n  DogOwner: Symbol('DogOwner'),\n};\n\n@Injectable()\nclass OwnersService {\n  constructor(\n    @Inject(InjectionTokens.CatOwner)\n    private catOwner: PetOwner<Cat>,\n    @Inject(InjectionTokens.DogOwner)\n    private dogOwner: PetOwner<Dog>,\n  ) {}\n}\n\n@Module({\n  providers: [\n    OwnersService,\n    {\n      provide: InjectionTokens.CatOwner,\n      useClass: PetOwnerImpl,\n    },\n    {\n      provide: InjectionTokens.DogOwner,\n      useClass: PetOwnerImpl,\n    },\n  ],\n})\nclass ApplicationModule {}\n\n    ","typescript"),t=(0,c.X)("\ninterface Cat { /* ... */ }\ninterface Dog { /* ... */ }\ninterface PetOwner<T> {}\n\n@Injectable()\nclass PetOwnerImpl<T> implements PetOwner<T> { /* ... */ }\n\nconst InjectionTokens = {\n  CatOwner: new InjectionToken<PetOwner<Cat>>('CatOwner'),\n  DogOwner: new InjectionToken<PetOwner<Dog>>('DogOwner'),\n};\n\n@Injectable()\nclass OwnersService {\n  constructor(\n    @Inject(InjectionTokens.CatOwner)\n    private catOwner: PetOwner<Cat>,\n    @Inject(InjectionTokens.DogOwner)\n    private dogOwner: PetOwner<Dog>,\n  ) {}\n}\n\n@NgModule({\n  providers: [\n    OwnersService,\n    {\n      provide: InjectionTokens.CatOwner,\n      useClass: PetOwnerImpl,\n    },\n    {\n      provide: InjectionTokens.DogOwner,\n      useClass: PetOwnerImpl,\n    },\n ]\n})\nclass ApplicationModule {}\n","typescript"),s=(0,c.X)('\ninterface Cat { /* ... */ }\ninterface Dog { /* ... */ }\ninterface PetOwner<T> {}\n\n@injectable()\nclass PetOwnerImpl<T> implements PetOwner<T> { /* ... */ }\n\nconst InjectionTokens = {\n  CatOwner: Symbol("CatOwner"),\n  DogOwner: Symbol("DogOwner"),\n};\n\n@injectable()\nclass OwnersService {\n  constructor(\n    @inject(InjectionTokens.CatOwner)\n    private catOwner: PetOwner<Cat>,\n    @inject(InjectionTokens.DogOwner)\n    private dogOwner: PetOwner<Dog>,\n  ) {}\n}\n\ncontainer.register(InjectionTokens.CatOwner, { useClass: PetOwnerImpl });\ncontainer.register(InjectionTokens.DogOwner, { useClass: PetOwnerImpl });\ncontainer.register(OwnersService, { useClass: OwnersService });\n    ',"typescript");return(0,r.jsxs)(i.Z,{children:[(0,r.jsx)(o.Z,{value:"clawject",label:"Clawject",default:!0,children:(0,r.jsx)(a.Z,{showLineNumbers:!0,language:"typescript",children:e})}),(0,r.jsx)(o.Z,{value:"nest",label:"NestJS",children:(0,r.jsx)(a.Z,{showLineNumbers:!0,language:"typescript",children:n})}),(0,r.jsx)(o.Z,{value:"angular",label:"Angular",children:(0,r.jsx)(a.Z,{showLineNumbers:!0,language:"typescript",children:t})}),(0,r.jsx)(o.Z,{value:"tsyringe",label:"TSyringe",children:(0,r.jsx)(a.Z,{showLineNumbers:!0,language:"typescript",children:s})})]})},d={title:"Introduction \ud83d\ude80",hide_title:!0,slug:"/"},p=void 0,w={id:"intro",title:"Introduction \ud83d\ude80",description:"Introduction \ud83d\ude80",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1708632463,formattedLastUpdatedAt:"Feb 22, 2024",frontMatter:{title:"Introduction \ud83d\ude80",hide_title:!0,slug:"/"},sidebar:"docs",next:{title:"Setup \ud83d\udee0",permalink:"/docs/setup"}},u={},j=[{value:"Introduction \ud83d\ude80",id:"introduction-",level:2},{value:"Main Features",id:"main-features",level:3},{value:"Inspiration",id:"inspiration",level:3}],g=()=>{const e={img:"img",...(0,s.a)()};return(0,r.jsx)(e.img,{src:"/img/spring.svg",alt:"spring_logo",style:{width:"1em",height:"auto"}})},h=()=>{const e={img:"img",...(0,s.a)()};return(0,r.jsx)(e.img,{src:"https://docs.nestjs.com/assets/logo-small.svg",alt:"nestjs_logo",style:{width:"1em",height:"auto"}})};function m(e){const n={a:"a",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"introduction-",children:"Introduction \ud83d\ude80"}),"\n",(0,r.jsxs)(n.p,{children:["Clawject is TypeScript Dependency Injection framework that's here to make your coding life easier.\nForget about ",(0,r.jsx)(n.strong,{children:"injection tokens"}),", ",(0,r.jsx)(n.strong,{children:"providers"})," and a huge number of ",(0,r.jsx)(n.strong,{children:"decorators on and in your business classes"}),".\nUse typescript features like interfaces, generics, type hierarchies in\na declarative and intuitive way and let Clawject do messy work for you!"]}),"\n",(0,r.jsx)(n.h3,{id:"main-features",children:"Main Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ahead of Time Dependency Injection based on TypeScript types."}),"\n",(0,r.jsx)(n.li,{children:"Declarative and intuitive API."}),"\n",(0,r.jsx)(n.li,{children:"Fast at runtime, all dependency-resolution work is done at compile time!"}),"\n",(0,r.jsx)(n.li,{children:"IDEs support, all errors and warnings are shown right in your code editor window."}),"\n",(0,r.jsx)(n.li,{children:"Ahead of Time circular dependencies detection with a clear cycle path, forget about runtime loops and stack overflows!"}),"\n",(0,r.jsx)(n.li,{children:"No need to use injection tokens and providers."}),"\n",(0,r.jsx)(n.li,{children:"No need to refer to a dependency injection library in your business-oriented classes, leave them clean and framework independent!"}),"\n",(0,r.jsx)(n.li,{children:"Injection scopes support and ability to create your own custom scopes."}),"\n",(0,r.jsx)(n.li,{children:"Supports both experimental and stable JavaScript decorators."}),"\n",(0,r.jsx)(n.li,{children:"Minimal runtime overhead."}),"\n",(0,r.jsx)(n.li,{children:"Clawject is not modifying your classes, not adding additional runtime fields, so it's safe to use it with any other library or framework."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Let's compare Clawject with other popular frameworks that implements DI pattern:"}),"\n","\n","\n",(0,r.jsx)(l,{}),"\n",(0,r.jsx)(n.h3,{id:"inspiration",children:"Inspiration"}),"\n","\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Clawject"})," is inspired by ",(0,r.jsx)(n.a,{href:"https://docs.spring.io/spring-framework/reference/core/beans.html",children:"Spring framework"})," ",(0,r.jsx)(g,{})," and ",(0,r.jsx)(n.a,{href:"https://nestjs.com/",children:"NestJS"})," ",(0,r.jsx)(h,{})]})]})}function O(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},5758:(e,n,t)=>{t.d(n,{X:()=>d});var r=t(7294),s=t(4935),i=t(6780),o=t(8538),a=t(9966),c=t(4990);const l=[o.Z,a.ZP,c.Z],d=(e,n)=>{const t=r.useCallback((()=>(0,s.WU)(e,{parser:n,plugins:l})),[e]),{data:o,error:a}=(0,i.r5)({promiseFn:t});return r.useEffect((()=>{a&&console.error(a)}),[a]),o}}}]);