"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[605],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8059:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={title:"Intro to IoC and DI",id:"ioc-di"},i=void 0,c={unversionedId:"concepts/ioc-di",id:"concepts/ioc-di",title:"Intro to IoC and DI",description:"Overview",source:"@site/docs/03-concepts/01-IoC_DI.mdx",sourceDirName:"03-concepts",slug:"/concepts/ioc-di",permalink:"/docs/concepts/ioc-di",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Intro to IoC and DI",id:"ioc-di"},sidebar:"tutorialSidebar",previous:{title:"Setup \ud83d\udee0\ufe0f",permalink:"/docs/Setup"},next:{title:"ContainerManager",permalink:"/docs/concepts/container-manager"}},s={},l=[{value:"Overview",id:"overview",level:2},{value:"What is Inversion of Control?",id:"what-is-inversion-of-control",level:2},{value:"What is Dependency Injection?",id:"what-is-dependency-injection",level:2},{value:"The Clawject IoC container",id:"the-clawject-ioc-container",level:2},{value:"Constructor-Based Dependency Injection",id:"constructor-based-dependency-injection",level:2},{value:"Lazy Initialized Beans",id:"lazy-initialized-beans",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"intro-to-inversion-of-control-and-dependency-injection-with-clawject"},"Intro to Inversion of Control and Dependency Injection with Clawject"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"In this section, we will explore the principles of Inversion of Control (IoC) and Dependency Injection (DI),\nand take a look at how these are implemented in Clawject."),(0,o.kt)("h2",{id:"what-is-inversion-of-control"},"What is Inversion of Control?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Inversion of Control"))," is a principle in software engineering which transfers the control\nof objects or portions of a program to a container or framework.\nWe most often use it in the context of object-oriented programming."),(0,o.kt)("p",null,"In contrast with traditional programming, in which our custom code makes calls to a library,\nthe IoC enables a framework to take control of the flow of a program and make calls to our custom code.\nTo enable this, frameworks use abstractions with additional behavior built in."),(0,o.kt)("p",null,"The advantages of this architecture are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Decoupling the execution of a task from its implementation"),(0,o.kt)("li",{parentName:"ul"},"Making it easier to switch between different implementations"),(0,o.kt)("li",{parentName:"ul"},"Greater modularity of a program"),(0,o.kt)("li",{parentName:"ul"},"Greater ease in testing a program by isolating a component or mocking its dependencies\nand allowing components to communicate through contracts")),(0,o.kt)("p",null,"One of the ways we can achieve Inversion of Control is a Dependency Injection (DI)."),(0,o.kt)("h2",{id:"what-is-dependency-injection"},"What is Dependency Injection?"),(0,o.kt)("p",null,"Dependency injection is a pattern we can use to implement IoC,\nwhere the control being inverted is setting an object's dependencies."),(0,o.kt)("p",null,"Connecting objects with other objects, or \u201c",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"injecting")),"\u201d objects into other objects, is done by an assembler rather than by the objects themselves."),(0,o.kt)("p",null,"Here's how we would create an object dependency in traditional programming:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Store {\n  private item: Item;\n    \n  constructor() {\n    this.item = new ItemImpl();\n  }\n}\n")),(0,o.kt)("p",null,"By using DI, we can rewrite the example without specifying the implementation of the Item that we want:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Store {\n  constructor(\n    private item: Item\n  ) {}\n}\n")),(0,o.kt)("h2",{id:"the-clawject-ioc-container"},"The Clawject IoC container"),(0,o.kt)("p",null,"An IoC container is a common characteristic of frameworks that implement IoC."),(0,o.kt)("p",null,"In the Clawject, the interface CatContext represents the IoC container.\nThe Clawject container is responsible for instantiating, configuring and assembling objects known as beans,\nas well as managing their life cycles."),(0,o.kt)("p",null,"Right now Clawject provides one way to manage IoC containers. This is ContainerManager interface."),(0,o.kt)("p",null,"Here is the way to instantiate container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class ApplicationContext extends CatContext {}\n\nContainerManager.init(ApplicationContext);\n")),(0,o.kt)("h2",{id:"constructor-based-dependency-injection"},"Constructor-Based Dependency Injection"),(0,o.kt)("p",null,"In the case of constructor-based dependency injection,\nthe container will invoke a constructor with arguments each representing a dependency we want to set."),(0,o.kt)("p",null,"Clawject resolves each argument primarily by type, followed by the name of the constructor parameter.\nLet's see the configuration of a bean and its dependencies using Bean call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Bar {}\nclass Foo {\n  constructor(private bar: Bar) {}\n}\n\nclass ApplicationContext extends CatContext {\n  foo = Bean(Foo)\n  bar = Bean(Bar)\n}\n")),(0,o.kt)("p",null,"We're assigning a Bean call result to a class property to define a bean.\nBean name is a property name."),(0,o.kt)("p",null,"For a bean with the default singleton scope, Clawject first checks if a cached instance of the bean already exists,\nand only creates a new one if it doesn't.\nIf we're using the prototype scope, the container returns a new bean instance for each bean instance request."),(0,o.kt)("p",null,"Let's see how we can define a bean with the prototype scope:"),(0,o.kt)("p",null,"In this example, we have two beans that require the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Baz"))," instance,\nfor each of which the container creates a new instance of ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Baz"))," class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class Baz {}\nclass Bar {\n  constructor(private baz: Baz) {}\n}\nclass Foo {\n  constructor(private baz: Baz) {}\n}\n\nclass ApplicationContext extends CatContext {\n  foo = Bean(Foo)\n  bar = Bean(Bar)\n  baz = Bean(Baz, { scope: 'prototype' })\n}\n")),(0,o.kt)("h2",{id:"lazy-initialized-beans"},"Lazy Initialized Beans"),(0,o.kt)("p",null,"By default, the container creates and configures all singleton beans during initialization.\nTo avoid this, we can use the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"lazy"))," attribute with value ",(0,o.kt)("strong",{parentName:"p"},"true")," on the bean configuration level: "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"foo")," bean will only be initialized when it's first requested, and not at startup."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class ApplicationContext extends CatContext {\n  foo = Bean(Foo, { lazy: true })\n}\n")),(0,o.kt)("p",null,"You can redefine the default lazy value for all beans in clawject configuration file TODO ADD LINK"))}d.isMDXComponent=!0}}]);