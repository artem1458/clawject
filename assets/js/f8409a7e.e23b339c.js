"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[206],{9325:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var c=t(5893),o=t(1151);const r={title:"Introduction",slug:"/"},a=void 0,i={id:"intro",title:"Introduction",description:"Clawject is TypeScript Dependency Injection framework that's here to make your coding life easier.",source:"@site/docs/intro.mdx",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:1701602866,formattedLastUpdatedAt:"Dec 3, 2023",frontMatter:{title:"Introduction",slug:"/"},sidebar:"docs",next:{title:"Setup \ud83d\udee0\ufe0f",permalink:"/docs/setup"}},s={},l=[{value:"Don&#39;t do this to inject interface implementation",id:"dont-do-this-to-inject-interface-implementation",level:3}];function d(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:["Clawject is TypeScript Dependency Injection framework that's here to make your coding life easier.\nForget about ",(0,c.jsx)(n.strong,{children:"injection tokens"}),", ",(0,c.jsx)(n.strong,{children:"providers"})," and a huge number of ",(0,c.jsx)(n.strong,{children:"decorators on and in your business classes"}),"."]}),"\n",(0,c.jsx)(n.p,{children:"Clawject maintains dependency resolution, instantiation, instances injection,\nobjects' lifecycle, cyclic-dependency detection and more for you."}),"\n",(0,c.jsx)(n.p,{children:"Use typescript interfaces, generics, type hierarchies and let Clawject do messy work for you."}),"\n",(0,c.jsx)(n.h3,{id:"dont-do-this-to-inject-interface-implementation",children:"Don't do this to inject interface implementation"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:"/* connection.ts */\ninterface Connection {/* ... */}\nclass ConnectionImpl implements Connection {/* ... */}\nconst connection = new ConnectionImpl()\n\n/* index.ts */\nimport { connection } from './connection';\n\n@Module({\n  providers: [\n    {\n      provide: 'CONNECTION',\n      useValue: connection,\n    },\n  ],\n})\nexport class AppModule {}\n\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:'import { Bean, CatContext, ContainerManager } from \'@clawject/di\';\n\ninterface IReadOnlyCache<V> {\n  get(key: string): V | null;\n}\ninterface ICache<V> extends IReadOnlyCache<V> {\n  set(key: string, value: V): void;\n  clear(): void;\n}\n\nclass InMemoryCache<V> implements ICache<V> {\n  /* ... */\n}\n\nclass CustomerService {\n  constructor(\n    /* Clawject injects "customerCache" bean just by interface with a generic type */\n    private cache: IReadOnlyCache<Customer>\n  ) {}\n}\nclass StoreService {\n  constructor(\n    /* Clawject injects "storeCache" bean just by interface with a generic type */\n    private cache: ICache<Store>\n  ) {}\n}\nclass CacheManager {\n  constructor(\n    /* Clawject injects array of all found beans with type ICache (customerCache, storeCache) */\n    private caches: ICache<any>[]\n  ) {}\n}\n\nclass ApplicationContext extends CatContext {\n  customerCache = Bean(InMemoryCache<Customer>)\n  storeCache = Bean(InMemoryCache<Store>)\n  customerService = Bean(CustomerService)\n  storeService = Bean(StoreService)\n  cacheManager = Bean(CacheManager)\n}\n\nContainerManager.init(ApplicationContext)\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var c=t(7294);const o={},r=c.createContext(o);function a(e){const n=c.useContext(r);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),c.createElement(r.Provider,{value:n},e.children)}}}]);