"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1501],{3778:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>j,default:()=>x,frontMatter:()=>h,metadata:()=>g,toc:()=>f});var s=n(5893),r=n(1151),i=(n(7294),n(4866)),a=n(5162),l=n(9286),c=n(5758);const o=()=>(0,s.jsxs)(i.Z,{children:[(0,s.jsx)(a.Z,{value:"yarn",label:"yarn",default:!0,children:(0,s.jsx)(l.Z,{showLineNumbers:!0,language:"bash",children:"yarn add @clawject/di"})}),(0,s.jsx)(a.Z,{value:"npm",label:"npm",children:(0,s.jsx)(l.Z,{showLineNumbers:!0,language:"bash",children:"npm install @clawject/di"})})]}),p=()=>{const e=(0,c.X)("\n    import { ClawjectWebpackPlugin } from '@clawject/di/webpack';\n\n    export default {\n      module: {\n        rules: [{\n          test: /\\.ts$/,\n          loader: 'ts-loader',\n          options: {\n            // This option needed if you have typescript >= 5 and using\n            // live-compiler method of ts-patch\n            // https://github.com/nonara/ts-patch#method-1-live-compiler\n            compiler: 'ts-patch/compiler'\n          }\n        }]\n      },\n      plugins: [\n        new ClawjectWebpackPlugin()\n      ]\n    };\n  ","typescript"),t=(0,c.X)('\n    {\n      "compilerOptions": {\n        "plugins": [\n          { "transform": "@clawject/di/transformer" },\n          {\n            "transform": "@clawject/di/transformer/metadata",\n            "afterDeclarations": true\n          }\n        ]\n      }\n    }\n  ',"json");return(0,s.jsxs)(i.Z,{children:[(0,s.jsx)(a.Z,{value:"webpack",label:"webpack.config.js",default:!0,children:(0,s.jsx)(l.Z,{showLineNumbers:!0,language:"typescript",children:e})}),(0,s.jsx)(a.Z,{value:"tsconfig",label:"tsconfig.json",default:!0,children:(0,s.jsx)(l.Z,{showLineNumbers:!0,language:"json",children:t})})]})},d=()=>{const e=(0,c.X)("\n    import { defineConfig } from 'vite';\n    import typescript from 'rollup-plugin-typescript2';\n\n    export default defineConfig({\n      esbuild: false,\n      plugins: [\n        typescript(),\n      ],\n    });\n  ","typescript"),t=(0,c.X)('\n    {\n      "compilerOptions": {\n        "plugins": [\n          { "transform": "@clawject/di/transformer" },\n          {\n            "transform": "@clawject/di/transformer/metadata",\n            "afterDeclarations": true\n          }\n        ]\n      }\n    }\n  ',"json");return(0,s.jsxs)(i.Z,{children:[(0,s.jsx)(a.Z,{value:"vite",label:"vite.config.ts",default:!0,children:(0,s.jsx)(l.Z,{showLineNumbers:!0,language:"typescript",children:e})}),(0,s.jsx)(a.Z,{value:"tsconfig",label:"tsconfig.json",default:!0,children:(0,s.jsx)(l.Z,{showLineNumbers:!0,language:"json",children:t})})]})},u=()=>{const e=(0,c.X)("\n    import { ClawjectTransformer } from '@clawject/di/transformer';\n    import { ClawjectWebpackPlugin } from '@clawject/di/webpack'\n\n    export default {\n      module: {\n        rules: [{\n          test: /\\.ts$/,\n          loader: 'ts-loader',\n          options: {\n            getCustomTransformers: (program, getProgram) => ({\n              before: [\n                ClawjectTransformer(getProgram)\n              ]\n            })\n          }\n        }]\n      },\n      plugins: [\n        new ClawjectWebpackPlugin()\n      ]\n    };\n  ","typescript");return(0,s.jsx)(l.Z,{showLineNumbers:!0,title:"webpack.config.js",language:"typescript",children:e})},h={title:"Setup \ud83d\udee0",hide_title:!0,tags:["setup","ts-patch","webpack","vite","rollup","tsc"]},j=void 0,g={id:"setup",title:"Setup \ud83d\udee0",description:"Prerequisites",source:"@site/docs/setup.mdx",sourceDirName:".",slug:"/setup",permalink:"/docs/setup",draft:!1,unlisted:!1,tags:[{label:"setup",permalink:"/docs/tags/setup"},{label:"ts-patch",permalink:"/docs/tags/ts-patch"},{label:"webpack",permalink:"/docs/tags/webpack"},{label:"vite",permalink:"/docs/tags/vite"},{label:"rollup",permalink:"/docs/tags/rollup"},{label:"tsc",permalink:"/docs/tags/tsc"}],version:"current",lastUpdatedAt:1708288919,formattedLastUpdatedAt:"Feb 18, 2024",frontMatter:{title:"Setup \ud83d\udee0",hide_title:!0,tags:["setup","ts-patch","webpack","vite","rollup","tsc"]},sidebar:"docs",previous:{title:"Introduction \ud83d\ude80",permalink:"/docs/"},next:{title:"Language Service \u2728",permalink:"/docs/language-service"}},m={},f=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Installation",id:"installation",level:3},{value:"ts-patch",id:"ts-patch",level:3},{value:"ts-patch, webpack, ts-loader",id:"ts-patch-webpack-ts-loader",level:4},{value:"ts-patch, vite, rollup-plugin-typescript2",id:"ts-patch-vite-rollup-plugin-typescript2",level:4},{value:"ts-patch, pure typescript (tsc)",id:"ts-patch-pure-typescript-tsc",level:4},{value:"Without ts-patch",id:"without-ts-patch",level:3},{value:"webpack, ts-loader",id:"webpack-ts-loader",level:4}];function w(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Node.js version 16 or above"}),"\n",(0,s.jsx)(t.li,{children:"TypeScript version 4.8 \u2013 5.3"}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n","\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Remember to ",(0,s.jsx)(t.a,{href:"/docs/language-service",children:"install language service plugin"})," to get support for ",(0,s.jsx)(t.strong,{children:"Clawject"})," features right in your code editor!"]})}),"\n",(0,s.jsx)(t.h3,{id:"ts-patch",children:"ts-patch"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"Patches typescript to allow custom transformers (plugins) during build."})}),"\n",(0,s.jsxs)(t.p,{children:["ts-patch is the best way to utilize ",(0,s.jsx)(t.strong,{children:"Clawject"})," features.\nIt allows you to use ",(0,s.jsx)(t.strong,{children:"Clawject"})," with any build tool that uses ",(0,s.jsx)(t.strong,{children:"typescript"})," compiler."]}),"\n",(0,s.jsxs)(t.p,{children:["For detailed ts-patch configuration guide - please refer to ",(0,s.jsx)(t.a,{href:"https://github.com/nonara/ts-patch#readme",children:"ts-patch documentation"}),"."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["You can also use ",(0,s.jsx)(t.strong,{children:"ttypescript"})," instead of ",(0,s.jsx)(t.strong,{children:"ts-patch"}),", but it's deprecated and not supports modern typescript versions\n",(0,s.jsx)(t.a,{href:"https://github.com/cevek/ttypescript#deprecation-notice",children:"deprecation notice"}),"."]})}),"\n",(0,s.jsx)(t.h4,{id:"ts-patch-webpack-ts-loader",children:"ts-patch, webpack, ts-loader"}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsxs)(t.p,{children:["When using webpack with ",(0,s.jsx)(t.strong,{children:"ts-loader"})," - make sure ",(0,s.jsx)(t.strong,{children:"transpileOnly"})," mode is disabled.\nBasically, ",(0,s.jsx)(t.strong,{children:"transpileOnly"})," disables the ability to perform static type checking,\nwhich is required for ",(0,s.jsx)(t.strong,{children:"Clawject"})," to work.\nAlso, if you're using ",(0,s.jsx)(t.strong,{children:"Babel"})," - please make sure that it's applied ",(0,s.jsx)(t.strong,{children:"after"})," ts-loader.\n",(0,s.jsx)(t.a,{href:"https://github.com/TypeStrong/ts-loader#transpileonly",children:"ts-loader#transpileOnly"})]})}),"\n","\n",(0,s.jsx)(p,{}),"\n",(0,s.jsx)(t.h4,{id:"ts-patch-vite-rollup-plugin-typescript2",children:"ts-patch, vite, rollup-plugin-typescript2"}),"\n",(0,s.jsx)(t.admonition,{type:"danger",children:(0,s.jsxs)(t.p,{children:["Currently ",(0,s.jsx)(t.strong,{children:"Vite"})," or ",(0,s.jsx)(t.strong,{children:"rollup-plugin-typescript2"})," not correctly utilizes ts-patch,\nit's ignoring compilation errors produced by Clawject, so it could lead to runtime errors."]})}),"\n","\n",(0,s.jsx)(d,{}),"\n",(0,s.jsx)(t.h4,{id:"ts-patch-pure-typescript-tsc",children:"ts-patch, pure typescript (tsc)"}),"\n",(0,s.jsx)(t.p,{children:"To make Clawject work with pure typescript (tsc), you need to define custom transformer in your tsconfig.json, and that's all."}),"\n",(0,s.jsx)(t.admonition,{title:"About typescript watch mode",type:"tip",children:(0,s.jsxs)(t.p,{children:["Clawject will work pretty well in ",(0,s.jsx)(t.strong,{children:"native tsc watch mode"})," as well!"]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",metastring:'title="tsconfig.json"',children:'{\n  "compilerOptions": {\n    "plugins": [\n      { "transform": "@clawject/di/transformer" },\n      {\n        "transform": "@clawject/di/transformer/metadata",\n        "afterDeclarations": true\n      }\n    ]\n  }\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"without-ts-patch",children:"Without ts-patch"}),"\n",(0,s.jsx)(t.p,{children:"If you don't want to use ts-patch for some reason - you can utilize Clawject features without it."}),"\n",(0,s.jsx)(t.h4,{id:"webpack-ts-loader",children:"webpack, ts-loader"}),"\n","\n","\n",(0,s.jsx)(u,{})]})}function x(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(w,{...e})}):w(e)}},5758:(e,t,n)=>{n.d(t,{X:()=>p});var s=n(7294),r=n(4935),i=n(6780),a=n(8538),l=n(9966),c=n(4990);const o=[a.Z,l.ZP,c.Z],p=(e,t)=>{const n=s.useCallback((()=>(0,r.WU)(e,{parser:t,plugins:o})),[e]),{data:a,error:l}=(0,i.r5)({promiseFn:n});return s.useEffect((()=>{l&&console.error(l)}),[l]),a}}}]);